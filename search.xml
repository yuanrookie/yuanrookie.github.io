<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>java环境工具安装和基本知识了解</title>
      <link href="/2023/071313.html"/>
      <url>/2023/071313.html</url>
      
        <content type="html"><![CDATA[<h1 id="java环境工具安装和基本知识了解"><a href="#java环境工具安装和基本知识了解" class="headerlink" title="java环境工具安装和基本知识了解"></a>java环境工具安装和基本知识了解</h1><h2 id="一、cmd常见米命令"><a href="#一、cmd常见米命令" class="headerlink" title="一、cmd常见米命令"></a>一、cmd常见米命令</h2><ol><li>《 D: 》 切换到对应盘符中</li><li>《 dir》 查看当前路径下的内容</li><li>《cd  和 cd..》 进入单级目录或者返回上一级目录</li><li>《cd 目录1\目录2 和 cd \》 进入多级目录或者回退到盘符</li><li>《cls 和exit》 清屏 和退出命令提示符窗</li></ol><h2 id="二、java环境工具安装流程"><a href="#二、java环境工具安装流程" class="headerlink" title="二、java环境工具安装流程"></a>二、java环境工具安装流程</h2><ol><li>jdk安装<blockquote><p><a href="https://blog.csdn.net/weixin_44778232/article/details/124610021">jdk安装教程</a></p></blockquote></li><li>idea下载安装教程<blockquote><p><a href="https://blog.csdn.net/ACE_U_005A/article/details/114882838">idea下载安装教程</a><br><a href="https://blog.csdn.net/ACE_U_005A/article/details/125552411">idea配置教程</a></p></blockquote></li><li>maven安装教程<blockquote><p><a href="https://blog.csdn.net/u012660464/article/details/114113349">maven安装教程</a></p></blockquote></li><li>IDEA实用插件</li></ol><ul><li>生成标准javabean类  安装PTG插件</li></ul><h2 id="三、java中基础知识了解"><a href="#三、java中基础知识了解" class="headerlink" title="三、java中基础知识了解"></a>三、java中基础知识了解</h2><blockquote><p><a href="https://www.bilibili.com/video/BV17F411T7Ao/?spm_id_from=333.337.search-card.all.click&vd_source=ee23caf8ba13ec874dfa7f165dce3c31">java入门教程上</a></p></blockquote><ol><li>jdk,jre,jvm三者之间的关系</li></ol><ul><li>JDK是java开发工具包，包括 JVM虚拟机（java 运行的地方），核心类库(Java已经写好的工具)，开发工具（如 javac,java,jdb,jhat）</li><li>JRE是Java运行环境,由JVM,核心类库，运行工具组成</li><li>JDK包含了JRE，JRE包含了JVM</li></ul><ol start="2"><li>注释</li></ol><ul><li>单行注释 &#x2F;&#x2F;内容    快捷键 ctrl +&#x2F;</li><li>多行注释 &#x2F;<em>内容</em>&#x2F;  快捷键：ctrL+shift+&#x2F;</li><li>文档注释  &#x2F;*<em>内容</em>&#x2F;</li></ul><ol start="3"><li>字面量分类</li></ol><ul><li>整数 如77</li><li>小数如22.2</li><li>字符串 如 “jkdsahjd”</li><li>字符类型 如 ‘a’</li><li>布尔类型 如 false</li><li>空类型 如 void</li><li>特殊字面量 \t 制表符（把前面字符串的长度补齐到8，或者8的整数倍；最少补一个空格，最多补八个空格）</li></ul><pre class=" language-java"><code class="language-java"> SyStem<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token operator">+</span><span class="token string">'\t'</span><span class="token operator">+</span> <span class="token string">"age"</span><span class="token punctuation">)</span> SyStem<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token operator">+</span><span class="token string">'\t'</span><span class="token operator">+</span> <span class="token string">"23"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//实际效果</span> name    age tom     <span class="token number">23</span></code></pre><ol start="4"><li>数据类型<br>数据类型分为基本数据类型和引用数据类型两类</li></ol><ul><li>基本数据类型<br>基本数据类型分为四大类八个变量；</li></ul><table><thead><tr><th>数据类型</th><th align="center">关键字</th><th>取值范围</th><th>范例</th></tr></thead><tbody><tr><td>整数</td><td align="center">byte</td><td>-128~127</td><td>byte emp &#x3D; 12</td></tr><tr><td>整数</td><td align="center">short</td><td>-32768~32767</td><td>byte emp &#x3D; 12</td></tr><tr><td>整数</td><td align="center">int</td><td>10位数</td><td>byte emp &#x3D; 12</td></tr><tr><td>整数</td><td align="center">long</td><td>19位数</td><td>byte emp &#x3D; 12L</td></tr><tr><td>浮点数</td><td align="center">float</td><td>-3.401298e-38到3.402823e+38</td><td>float emp &#x3D; 12.1F</td></tr><tr><td>浮点数</td><td align="center">double</td><td>-4.90000000e-324到1.797693e+308</td><td>double emp &#x3D; 12.1</td></tr><tr><td>字符</td><td align="center">char</td><td>0-65535</td><td>char emp &#x3D; ‘a’</td></tr><tr><td>布尔类型</td><td align="center">boolean</td><td>true,false</td><td>char emp &#x3D;false</td></tr><tr><td>5. 标识符命名方法</td><td align="center"></td><td></td><td></td></tr><tr><td>标识符是由字母数字下划线和$组成；不能采用关键字；不能以数字开头；区分大小写；标识符名要见名知意</td><td align="center"></td><td></td><td></td></tr></tbody></table><ul><li>方法，变量采用小驼峰命名</li><li>类名 采用大驼峰命名</li></ul><ol start="6"><li>idea中快捷键方式</li></ol><ul><li>快速创建一个模板</li></ul><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">//psvm+回车 可以快速创建以下模板</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ul><li>快速创建一个输出语句 sout+回车</li></ul><pre class=" language-java"><code class="language-java">        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="7"><li>API帮助文档<br>链接: <a href="https://pan.baidu.com/s/1_Zlr731rtXiy5HGzwT56iA">https://pan.baidu.com/s/1_Zlr731rtXiy5HGzwT56iA</a> 提取码: ndpc 复制这段内容后打开百度网盘手机App，操作更方便哦<br>当下载完毕之后，右击这个文件，点击属性，把解除锁定勾选上，即可正常使用。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java学习之路--基础知识（一）</title>
      <link href="/2023/071314.html"/>
      <url>/2023/071314.html</url>
      
        <content type="html"><![CDATA[<h1 id="java基础知识（一）"><a href="#java基础知识（一）" class="headerlink" title="java基础知识（一）"></a>java基础知识（一）</h1><h2 id="一、运算符"><a href="#一、运算符" class="headerlink" title="一、运算符"></a>一、运算符</h2><ol><li>算数运算符(加减乘除取余)</li></ol><pre class=" language-java"><code class="language-java">       <span class="token comment" spellcheck="true">// +</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// -</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// *</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// /</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// %</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token operator">%</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如何由小数参与以上运算，结果有可能不准，原因待解释</span></code></pre><ul><li>隐式转换<br>取值范围小的数值向取值范围大的数值转换；（byte&lt;short&lt;int&lt;long&lt;float&lt;double）<br>byte、short、char 在参与运算时，都会先直接提升为int ，然后进行运算。</li><li>强制转换<br>格式：目标数据类型 变量名&#x3D;（目标数据类型）被强制转换数据</li><li>字符+数字 ，会先把字符转换成对应的数字在相加（如 ‘a’ 对应的时97，’A’对应的是65）</li></ul><ol start="2"><li>自增自减运算符</li><li>赋值运算符</li><li>关系运算符</li><li>逻辑运算符</li></ol><ul><li>^  逻辑异或，相同为false,不同为true</li><li>短路逻辑运算符（&amp;&amp;,||），效果和&amp;,| 一样，但是具有短路效果</li></ul><ol start="6"><li>三元运算符</li><li>补码和反码</li></ol><h2 id="二、判断和循环"><a href="#二、判断和循环" class="headerlink" title="二、判断和循环"></a>二、判断和循环</h2><ol><li>回文数</li></ol><pre class=" language-java"><code class="language-java">        Scanner sc<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入一个数字"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> x<span class="token operator">=</span>sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//赋值一个数字</span>        <span class="token keyword">int</span> number<span class="token operator">=</span>x<span class="token punctuation">;</span>        <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>number<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>           <span class="token keyword">int</span> ge<span class="token operator">=</span> number<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>           number<span class="token operator">/=</span><span class="token number">10</span><span class="token punctuation">;</span>           num<span class="token operator">=</span>num<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>ge<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token operator">==</span>x<span class="token operator">?</span><span class="token string">"是回文数"</span><span class="token operator">:</span><span class="token string">"不是回文数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="2"><li>求商和余数（要求不使用乘除和%）<br>思想：循环实现</li></ol><pre class=" language-java"><code class="language-java">      Scanner sc<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入被除数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> x<span class="token operator">=</span>sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//赋值一个数字</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入除数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> y<span class="token operator">=</span>sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//赋值一个数字</span>        <span class="token keyword">int</span> remainder<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//余数初始化</span>        <span class="token keyword">int</span> business<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//商初始化</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token operator">>=</span>y<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        x<span class="token operator">-=</span>y<span class="token punctuation">;</span>        business<span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>        remainder<span class="token operator">=</span>x<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"商:"</span><span class="token operator">+</span>business<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"余数"</span><span class="token operator">+</span>remainder<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="3"><li>逢7过（从任意数字开始报数，如果报的数字包含7或者是7的倍数，就说过;打印1-100之间满足规则的数字）</li></ol><pre class=" language-java"><code class="language-java">    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>num<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span>num<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">%</span><span class="token number">7</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">||</span>num<span class="token operator">%</span><span class="token number">10</span><span class="token operator">==</span><span class="token number">7</span><span class="token operator">||</span>num<span class="token operator">/</span><span class="token number">10</span><span class="token operator">%</span><span class="token number">10</span><span class="token operator">==</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//条件判断的条件要充分考虑各种情况</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="三、数组"><a href="#三、数组" class="headerlink" title="三、数组"></a>三、数组</h2><ol><li>数组格式</li></ol><ul><li>完整格式（数据类型[] 数组名&#x3D;new 数据类型 [] {元素1，元素2}）</li><li>简化格式 （数据类型[] 数组名&#x3D;{元素1，元素2}）</li><li>数据类型有double,int,String</li></ul><ol start="2"><li>数组初始化长度</li></ol><ul><li>格式： 数据类型[] 数组名 &#x3D;new 数据类型[数组长度]</li></ul><ol start="3"><li>二维数组</li></ol><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//格式:数据类型[][] 数组名=new 数据类型[][] &amp;#123;&amp;#123;元素1，元素2&amp;#125;,&amp;#123;元素1，元素2&amp;#125;&amp;#125;;</span><span class="token comment" spellcheck="true">// 简化格式:数据类型[][] 数组名=&amp;#123;&amp;#123;元素1，元素2&amp;#125;,&amp;#123;元素1，元素2&amp;#125;&amp;#125;;</span></code></pre><ol start="4"><li>Arrays</li></ol><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//toSting() 将数组编变成字符串</span>    <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//[1,2,3,4,5,6,7]</span>    <span class="token comment" spellcheck="true">//二分查找法查找元素（前提：数组必须是有序的，且按照升序）</span>    <span class="token comment" spellcheck="true">//如果要查找元素存在，则返回真实索引，否则会返回-1；</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//1</span>    <span class="token comment" spellcheck="true">//copyOf()拷贝数组</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> newArr1<span class="token operator">=</span>Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>newArr1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[1, 2, 3, 4, 5, 6, 7, 0, 0, 0]</span>    <span class="token comment" spellcheck="true">// copyOfRange()拷贝数组指定范围</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> newArr2<span class="token operator">=</span>Arrays<span class="token punctuation">.</span><span class="token function">copyOfRange</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>newArr2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[2, 3, 4, 5, 6, 7, 0, 0, 0]</span>    <span class="token comment" spellcheck="true">//fill()填充数组</span>    Arrays<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[50, 50, 50, 50, 50, 50, 50]</span>    <span class="token comment" spellcheck="true">//sort 排序 。默认给基本数据类型升序排列 ，底层是使用快速排序</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[1, 2, 3, 4, 5, 8, 9, 19]</span>    <span class="token comment" spellcheck="true">//sort 降序写法</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr2<span class="token punctuation">,</span><span class="token punctuation">(</span>Integer o1<span class="token punctuation">,</span>Integer o2<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">return</span> o2<span class="token operator">-</span>o1<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//sort降序原理</span>        Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> arr3<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr3<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span> <span class="token punctuation">(</span>Integer o1<span class="token punctuation">,</span>Integer o2<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> o2<span class="token operator">-</span>o1<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[19, 9, 8, 5, 4, 3, 2, 1]</span></code></pre><h2 id="四、方法"><a href="#四、方法" class="headerlink" title="四、方法"></a>四、方法</h2><ol><li>方法概念及用途</li></ol><ul><li>方法是程序中最小的执行单元;将重复的代码、具有独立功能的代码可以抽取到方法中;方法可以提高代码的复用性和可维护性。</li><li>方法必须先定义后调用</li></ul><ol start="2"><li>最简单方法格式：</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> 方法名（）<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  方法体<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ol start="3"><li>带参数的方法定义和调用</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> 返回值类型 方法名（<span class="token keyword">int</span> number1<span class="token punctuation">,</span><span class="token keyword">int</span> number2）<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token keyword">return</span> 返回值<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//注意方法返回值类型 和返回值的类型 是一样的</span></code></pre><ol start="4"><li>方法的重载</li></ol><ul><li>同一个类中，方法名相同，参数不同的方法（个数不同，顺序不同，类型不同），与返回值无关。</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//买飞机票</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Scanner sc<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入机票价格"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> price<span class="token operator">=</span>sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入月份数（1-12）"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> month<span class="token operator">=</span>sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入机票类型（1-头等舱，0-经济舱）"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> type<span class="token operator">=</span>sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> num<span class="token operator">=</span><span class="token function">airPrice</span><span class="token punctuation">(</span>price<span class="token punctuation">,</span>month<span class="token punctuation">,</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前季节机票价格为:"</span><span class="token operator">+</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">airPrice</span><span class="token punctuation">(</span><span class="token keyword">int</span> price<span class="token punctuation">,</span><span class="token keyword">int</span> month<span class="token punctuation">,</span><span class="token keyword">int</span>  type<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>month<span class="token operator">>=</span><span class="token number">5</span> <span class="token operator">&amp;&amp;</span> month<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>type<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//代表头等舱</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> price<span class="token operator">*</span><span class="token number">0.9</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> price<span class="token operator">*</span><span class="token number">8.5</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>type<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//代表头等舱</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> price<span class="token operator">*</span><span class="token number">0.7</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> price<span class="token operator">*</span><span class="token number">0.65</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//注意事项: 定义有参数的方法时候，传入的参数类型要与方法定义的参数类型一致；</span>    <span class="token comment" spellcheck="true">//方法如果有返回值，接受该方法返回值的变量，要与方法返回值的类型一样</span><span class="token comment" spellcheck="true">//开发验证码（验证码长度为5，前四位是大小写字母，最后一位是数字）</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token number">52</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//添加小写字母</span>                arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//添加大写字母</span>                arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">65</span><span class="token operator">+</span>i<span class="token operator">-</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        String result<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//随机抽取四个字母</span>        Random r<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> randomIndex<span class="token operator">=</span>r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            result<span class="token operator">+=</span>arr<span class="token punctuation">[</span>randomIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//随机抽取一个数字</span>        <span class="token keyword">int</span> num<span class="token operator">=</span>r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token operator">+=</span>num<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ol start="5"><li>键盘录入</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//nextInt()；接受整数</span><span class="token comment" spellcheck="true">//nextDouble();接受小数</span><span class="token comment" spellcheck="true">//next();接受字符串</span><span class="token comment" spellcheck="true">//遇到空格，制表符，回车就停止接受。</span><span class="token comment" spellcheck="true">//next Line();接受字符串。</span>Scanner sc<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> num<span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="五、面向对象"><a href="#五、面向对象" class="headerlink" title="五、面向对象"></a>五、面向对象</h2><ol><li>类和对象是什么<br>  类是共同特征的描述（设计图），对象是真实存在的具体实例</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> 类名<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token number">1</span><span class="token punctuation">.</span>成员变量（属性）  <span class="token number">2</span><span class="token punctuation">.</span>成员方法（行为）<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>类名 对象名<span class="token operator">=</span><span class="token keyword">new</span> 类名（）</code></pre><p>  封装： 对象代表什么，就得封装对应的数据，并提供数据对应的行为。<br>2. 关键字</p><ul><li>private:是一个权限修饰符；可以修饰成员变量和方法；被private修饰的成员只能在本类中才能访问。针对每一个私有化成员变量，都要提供一个get和set方法，来给成员赋值或者对外提供值。</li><li>this: 可以区别局部变量和成员变量</li></ul><ol start="3"><li>构造方法</li></ol><ul><li>如果没有定义构造方法，系统会给出一个默认的无参构造方法。</li><li>构造方法重载：带参构造方法和无参构造方法，两者方法名相同，参数不同。</li><li>构造方法在创建对象的时候，由虚拟机自动调用，给成员变量进行初始化。</li></ul><ol start="4"><li>标准的javabean类</li></ol><ul><li>构造方法、私有变量get、set生成的快捷方式： alt+INS或者alt +fn +ins</li><li>插件PTG 利用他来生成标准的javabean</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> String username<span class="token punctuation">;</span>  <span class="token keyword">private</span> String password<span class="token punctuation">;</span>  <span class="token keyword">private</span> String email<span class="token punctuation">;</span>  <span class="token keyword">private</span> String gender<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//空参构造方法</span>  <span class="token keyword">public</span> <span class="token function">HelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//有参构造方法</span>  <span class="token keyword">public</span> <span class="token function">HelloWorld</span><span class="token punctuation">(</span>String username<span class="token punctuation">,</span> String password<span class="token punctuation">,</span> String email<span class="token punctuation">,</span> String gender<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">=</span> username<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>email <span class="token operator">=</span> email<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//每个私有变量生成 get和set 方法</span>  <span class="token keyword">public</span> String <span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> username<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUsername</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">=</span> username<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> String <span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> password<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPassword</span><span class="token punctuation">(</span>String password<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ol start="5"><li>测试案例</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//文字版格斗游戏</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Random<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 角色描述 * * @author 20757 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Role</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">private</span> String name<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> blood<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Role</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Role</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> blood<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>blood <span class="token operator">=</span> blood<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获取     * @return name     */</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 设置     * @param name     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获取     * @return blood     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getBlood</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> blood<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 设置     * @param blood     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBlood</span><span class="token punctuation">(</span><span class="token keyword">int</span> blood<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>blood <span class="token operator">=</span> blood<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attack</span><span class="token punctuation">(</span>Role role<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//产生随机伤害1-20</span>     Random r<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">int</span> hpDamage <span class="token operator">=</span>r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>     role<span class="token punctuation">.</span><span class="token function">setBlood</span><span class="token punctuation">(</span>role<span class="token punctuation">.</span><span class="token function">getBlood</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>hpDamage<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>role<span class="token punctuation">.</span><span class="token function">getBlood</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"挥舞拳头，打了"</span><span class="token operator">+</span>role<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"一下，造成了"</span><span class="token operator">+</span>hpDamage<span class="token operator">+</span><span class="token string">"的伤害，目前"</span><span class="token operator">+</span>role<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>             <span class="token string">"还剩下"</span><span class="token operator">+</span>role<span class="token punctuation">.</span><span class="token function">getBlood</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"的血量"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>role<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"被"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"KO了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TextFightingGame</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     Role r1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Role</span><span class="token punctuation">(</span><span class="token string">"乔峰"</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     Role r2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Role</span><span class="token punctuation">(</span><span class="token string">"鸠摩智"</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">while</span><span class="token punctuation">(</span>r1<span class="token punctuation">.</span><span class="token function">getBlood</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>r2<span class="token punctuation">.</span><span class="token function">getBlood</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         r1<span class="token punctuation">.</span><span class="token function">attack</span><span class="token punctuation">(</span>r2<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>r2<span class="token punctuation">.</span><span class="token function">getBlood</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>         r2<span class="token punctuation">.</span><span class="token function">attack</span><span class="token punctuation">(</span>r1<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java学习之路--基础知识（四）</title>
      <link href="/2023/071315.html"/>
      <url>/2023/071315.html</url>
      
        <content type="html"><![CDATA[<h1 id="java基础知识（四）"><a href="#java基础知识（四）" class="headerlink" title="java基础知识（四）"></a>java基础知识（四）</h1><h2 id="一、面向对象进阶"><a href="#一、面向对象进阶" class="headerlink" title="一、面向对象进阶"></a>一、面向对象进阶</h2><ol><li>final<br> final修饰方法，表示最终方法，不能被重写；final修饰类，表示最终类，不能被继承；final 修饰变量，表示常量，不能被修改。</li><li>权限修饰符</li></ol><ul><li>private :只能在本类中使用</li><li>空着不写 ：在本类或者同一个包下的其他类中使用</li><li>protected : 本类、同一个包中的其他类，不同包下的子类</li><li>public : 各种情况下都能使用。</li><li>使用规则： (成员变量私有，方法公开；如果方法中的代码是抽取其他方法中共性代码，一般也是私有的)</li></ul><ol start="3"><li>代码块</li></ol><ul><li>局部代码块（提前结束变量的生命周期，已经淘汰）</li><li>构造代码块（写在构造方法之前；可以把多个构造方法中重复的代码抽取出来；在创建本类对象的时候，会先执行构造代码块在执行构造方法）</li><li>静态代码块（static{} ;  随着类的加载而加载，并且自动触发，只执行一次；用于类加载的时候，数据初始化使用）</li></ul><ol start="4"><li>抽象类&#x2F;抽象方法</li></ol><ul><li>抽象方法：将共性的行为（方法）抽取到父类之后，由于每个子类执行的内容是不用一样的，在父类中不能确定具体的方法体，该方法就可以定义为抽象方法（来使子类必须重写该方法）<br>格式： public abstract 返回值类型 方法名（参数列表）</li><li>抽象类<br>格式 publlic abstract class 类名<br>抽象类不能实例化（不能创建对象）;<br>抽象类中不一定有抽象方法，有抽象方法的类一定是抽象类。<br>可以有构造方法（当创建子类对象的时候，给属性进行赋值）<br>抽象类的子类（要么重写抽象类中所有抽象方法；要么是抽象类）</li></ul><ol start="5"><li>接口<br>  接口就是一种规则，是对行为的抽象；接口不能实例化；接口和类之间是实现关系，通过implements关键字实现。</li></ol><ul><li>定义一个接口<br>   public interface 接口名{<br>   }</li><li>接口和类之间是实现关系<br>  public  class 类名 implements 接口名{}</li><li>接口的子类（实现类）<br>   要么重写接口中所有的抽象方法<br>   要么是抽象类</li><li>注意事项<br>  接口和类可以单实现，也可以多实现<br>  public class 类名 implements 接口名1，接口名2{}<br>  实现类还可以继承一个类的同时，实现多个接口<br>  public class extends 父类 implements 接口名1 ，接口名2 {}</li><li>接口中成员的特点<br>   成员变量：只能是常量，默认修饰符：public static final<br>   构造方法：没有<br>   成员方法：JDk7以前只能定义抽象方法，JDK8开始可以定义有方法体的方法，JDK9开始可以定义私有方法。</li><li>JDK8以后接口中新增的方法<br>   允许在接口中定义默认方法，需要使用关键字default修饰—-&gt;解决接口升级问题<br>   格式：<br>   public default 返回值类型 方法名（参数列表）{}<br>   注意事项：<br>   默认方法不是抽象方法，所以不强制被重写；如果重写记得去掉default;<br>   public 可以省略，default不可被省略<br>   如果实现了多个接口，多个接口中存在相同的默认方法，子类就必须对该方法进行重写。</li><li>JDK9以后接口新增的方法<br>   私有方法定义格式：<br>  &#x2F;&#x2F;普通的私有方法，给默认方法服务的<br>   private 返回值类型 方法名（）{}<br>&#x2F;&#x2F; 静态的私有方法，给静态方法服务的<br>private static void 方法名（）{}</li><li>接口多态<br>   当一个方法的参数是接口时，可以传递接口所有的实现类的对象</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            Dog dog<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">"旺财"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Rabbit rabbit <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Rabbit</span><span class="token punctuation">(</span><span class="token string">"小白"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dog<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dog<span class="token punctuation">.</span><span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            rabbit<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">abstract</span>  <span class="token keyword">class</span>  <span class="token class-name">Animal</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Animal</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token keyword">implements</span> <span class="token class-name">Swim</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Dog</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"吃骨头"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"狗会狗刨"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">class</span> <span class="token class-name">Rabbit</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Rabbit</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"吃胡萝卜"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Frog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token keyword">implements</span> <span class="token class-name">Swim</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"青蛙会蛙泳"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token comment" spellcheck="true">//接口类</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Swim</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ol start="6"><li>设计模式</li></ol><ul><li>定义：<br>设计默认是一套被反复使用、多数人知晓的、代码设计经验的总结。目的是为了可重用代码，让代码更容易被他人理解，保证代码可靠性和程序的重用性。<br>设计模式就是为了实现目的的各种套路。</li><li>适配器设计模式<br> 解决接口与接口实现类之间的矛盾问题（当一个接口中抽象方法过多，但是只需要使用其中一部分的时候）<br> 书写步骤： 编写中间类XXXAdapter，实现对应的接口，对接口中的抽象方法进行空实现，让真正的实现类继承中间类，并重写需要用的方法（为了避免其他类创建适配器类的对象，中间的适配器类要用abstruct进行修饰）</li></ul><ol start="7"><li>内部类<br> 定义： 在一个类的里面，再定义一个类。<br>内部类表示的事物是外部类的一部分，内部类单独出现没有任何意义。<br>特点： 内部类可以直接访问外部类的成员，包括私有；外部类要访问内部类的成员，必须创建对象。<br>应用场景： 汽车的发动机，ArrayList 的迭代器，人的心脏等</li></ol><ul><li>成员内部类注意点<br>成员内部类可以被一些修饰符所修饰；在JDK16之前不能定义静态变量，JDK16 开始可以定义静态变量。<br>获取成员内部类对象方式<br>方式一：外部类编写方法，对外提供内部类对象</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Outer</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Inter</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getInter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Inter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>方式二：直接创建<br>格式： 外部类名.内部类名 对象名&#x3D;外部类对象.内部类对象<br>如： Outer.Inner oi&#x3D;new Outer().new Inner();</p><ul><li>静态内部类<br>格式： Outer.Inter oi &#x3D;new Outer().Inner();<br>调用方式：<br>非静态方法：先创建对象，用对象调用<br>静态方法：外部类名。内部类名.方法名();</li><li>局部内部类<br>定义： 将内部类定义在方法里卖弄就叫做局部内部类，类似于方法里面的局部变量。<br>外接无法直接使用，需要在方法内部创建对象并使用；该类可以直接访问外部类的成员，也可以访问方法内的局部变量。</li><li>匿名内部类<br>定义： 隐藏了名字的内部类</li></ul><p>格式：<br>&#x2F;&#x2F;继承或实现关系<br>&#x2F;&#x2F;方法的重写<br>&#x2F;&#x2F;创建对象<br>    new 类名或者接口名（）{<br>        重写方法；<br>    }</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//注意下面的  Swim()  &lt;---->public class 类名 impeimplements Swim</span><span class="token comment" spellcheck="true">//把class名删掉，剩下内容就变成一个没有名字的类，这个类想要实现Swim接口，所以需要在类中重写接口里面所有的抽象方法。</span><span class="token keyword">new</span> <span class="token class-name">Swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    publick <span class="token keyword">void</span> <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"重写游泳的方法"</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><p>应用场景： 当方法的参数是接口或者类时；以接口为例，可以传递这个接口的实现对象；如果类只使用一次，就可以使用匿名内部类来简化代码</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//实现关系</span>     <span class="token comment" spellcheck="true">//整体我们可以理解为Swim接口的实现类对象</span>        <span class="token comment" spellcheck="true">/*        class Swim1 implements Swim&amp;#123;            @Override            public void swim() &amp;#123;                System.out.println("重写游泳之后的方法");            &amp;#125;        &amp;#125;        * */</span>        <span class="token comment" spellcheck="true">//接口多态</span>       Swim s<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"重写游泳之后的方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//编译看左边，运行看看右边的原则</span>       s<span class="token punctuation">.</span><span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token comment" spellcheck="true">//继承关系</span>       <span class="token function">method</span><span class="token punctuation">(</span>               <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                   <span class="token annotation punctuation">@Override</span>                   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"狗吃骨头"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>               <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>       <span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span>Animal a<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Animal a=子类对象 多态</span>           a<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java学习之路--基础知识（三）</title>
      <link href="/2023/071315.html"/>
      <url>/2023/071315.html</url>
      
        <content type="html"><![CDATA[<h1 id="java基础知识（三）"><a href="#java基础知识（三）" class="headerlink" title="java基础知识（三）"></a>java基础知识（三）</h1><h2 id="一、集合（ArrayList）"><a href="#一、集合（ArrayList）" class="headerlink" title="一、集合（ArrayList）"></a>一、集合（ArrayList）</h2><ol><li><p>集合格式<br>ArrayList<String> 集合名字&#x3D;new ArrayList<String>()<br>集合添加的是引用类型或者基本数据类型对应的的包装类（char–&gt;Character;int –&gt; Integer;其他基本数据类型首字母大写）</p></li><li><p>集合成员方法</p></li></ol><ul><li>boolean add(E e) 添加元素，返回值代表是否添加成功</li><li>boolean remove(E e) 删除指定元素</li><li>E remove (int index) 根据索引删除指定元素，并返回这个元素</li><li>E set(int index,E e) 修改指定索引下的元素，并返回原来的元素</li><li>E get (int index) 获取指定索引的元素</li><li>int size() 集合的长度</li></ul><ol start="3"><li>集合案例</li></ol><ul><li>添加字符串，并进行遍历</li></ul><pre class=" language-java"><code class="language-java">   <span class="token comment" spellcheck="true">//创建集合</span>        ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> list<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// ArrayList&lt;Integer> list =new ArrayList&lt;>()</span>        <span class="token comment" spellcheck="true">//添加元素</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"abvcf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"sdaw2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历集合</span>        StringJoiner sj<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StringJoiner</span><span class="token punctuation">(</span><span class="token string">"--"</span><span class="token punctuation">,</span><span class="token string">"["</span><span class="token punctuation">,</span><span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            sj<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sj<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>添加对象，并遍历对象的属性</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span>  <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获取     * @return name     */</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 设置     * @param name     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获取     * @return age     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 设置     * @param age     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>   Student s1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"王大山"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   Student s2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"李飞"</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   Student s3<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"海域"</span><span class="token punctuation">,</span><span class="token number">234</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//创建集合</span>     ArrayList<span class="token operator">&lt;</span>Student<span class="token operator">></span> list<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//添加元素</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//遍历</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"名字是："</span><span class="token operator">+</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">",年龄是："</span><span class="token operator">+</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="二、面向对象进阶"><a href="#二、面向对象进阶" class="headerlink" title="二、面向对象进阶"></a>二、面向对象进阶</h2><p>面向对象三大特征  封装（对象代表什么，就得封装对应的数据，并提供对应的数据行为）、继承（当类与类之间，存在相同的内容，并满足子类是父类中的一种，可以考虑使用继承来优化代码）、多态。</p><ol><li>static</li></ol><ul><li>被static所修饰的成员变量叫做静态变量，被该类所有对象共享；不属于对象，属于类；随着类的加载而加载，优先于对象的存在；调用方式：类名调用，对象调用。</li><li>被 static所修饰的成员方法，叫做静态方法。多用在测试类和工具类中；javabean类中很少使用。<br>javabean类：用来秒速和一类事物的类，如student,teacher,dog等；<br>测试类：用来检查其他类是否书写正确，带有main方法的类，是程序的入口<br>工具类：不是用来描述事物的，而是帮我们做一些事情的类。</li><li>注意事项<br>静态方法中，只能访问静态。非静态方法可以访问所有。静态方法中没有this关键字。</li></ul><ol start="2"><li>继承</li></ol><ul><li>格式<br> public class Student extends Person{</li></ul><p> }</p><ul><li>优势<br>  可以把多个子类中重复的代码抽取到父类中，提高代码的复用性。<br>  子类可以在父类的基础上，增加其他的功能，使子类更加强大。</li><li>特点：<br>只能单继承：一个类只能继承一个直接父类；<br>不支持多继承，但是支持多层继承；<br>java中所有的类都直接或间接继承于Object类；<br>子类只能访问父类中非私有的成员。</li><li>子类到底可以继承父类中的哪些内容？<br>误区一： 父类私有的东西，子类就无法继承？<br>错误：父类中成员变量，子类可以全部继承，但是对于父类中私有的成员变量 子类无法调用。<br>误区二：父类中非私有的成员，就被子类继承下来了？<br>错误：只有父类中的虚方法（非private,非static,非final）才能被子类继承。</li><li>继承中：成员变量的访问特点： 就近原则。</li><li>继承中：成员方法的访问特点： 直接调用满足就近原则。</li><li>方法的重写<br> 在继承中，子类出现与父类中一摸一样的方法声明，就称子类这个方法是重写的方法；<br> 可以在子类方法前面加上 @Override 来检验；<br>只有被添加到虚方法表中的方法才能被重写。</li><li>继承中： 构造方法的访问特点：<br>子类中所有的构造方法默认先访问父类中的无参构造，在执行自己。<br>原因：子类在初始化的时候，有可能使用父类中的数据，如果父类没有完成初始化，子类将无法使用父类的数据。<br>子类在初始化之前，一定要调用父类构造方法先完成父类数据空间的初始化。<br>如果想调用父类中的有参构造，必须在第一行手动写super进行调用。</li></ul><ol start="3"><li>多态</li></ol><ul><li>应用场景：比如学校管理系统，注册页面（学生，教师，管理员）</li><li>定义： 同类型的对象，表现出不同的形态。</li><li>形式： 父类类型 对象名称&#x3D;子类对象；</li><li>多态的前提<br> 有继承关系；有父类引用指向子类对象；有方法重写；</li><li>多态好处： 使用父类型作为参数，可以接受所有子类对象</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//创建对象（多态方式）</span>      Animal a<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//调用成员变量；编译看左边，运行也看左边</span>        <span class="token comment" spellcheck="true">//编译看左边：javac在编译代码的时候，会看左边的父类中是否有这个变量，有，则编译成功，否则失败</span>        <span class="token comment" spellcheck="true">//运行也看左边;java运行代码，实际获取的是左边父类中的成员。</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//动物</span>        <span class="token comment" spellcheck="true">//调用成员方法：编译看左边，运行看右边</span>        a<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    String  name<span class="token operator">=</span><span class="token string">"动物"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Animal------show方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    String name<span class="token operator">=</span><span class="token string">"狗"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Dog-----show方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    String name<span class="token operator">=</span><span class="token string">"猫"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Cat-----show方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ul><li>多态优势：<br>定义方法的时候，使用父类型作为参数，可以接受所有子类对象，体现多态的扩展性与便利。<br>在多态形势下，右边对象可以实现解耦合，便于扩展和维护。</li><li>多态弊端：<br>不能使用子类的特有功能。（解决方式： 可以转换成真正的子类类型，从而调用子类独有的功能；转换类型与真实类型不一致会报错）</li><li>练习案例</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//创建对象（多态方式）</span>      Animal a<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Animal b<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Person c<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"老王"</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      c<span class="token punctuation">.</span><span class="token function">keepPet</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token string">"骨头"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Person d<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"老李"</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      d<span class="token punctuation">.</span><span class="token function">keepPet</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span><span class="token string">"鱼"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String name<span class="token punctuation">;</span>        <span class="token keyword">int</span> age<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">keepPet</span><span class="token punctuation">(</span>Animal a<span class="token punctuation">,</span>String something<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//在这里进行强转  如果a 是 狗 ，就强转成 d</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token keyword">instanceof</span> <span class="token class-name">Dog</span> d<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"年龄为"</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">"岁的"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"养了一只"</span> <span class="token operator">+</span> a<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"的"</span> <span class="token operator">+</span> a<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"岁的"</span> <span class="token operator">+</span> a<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"的"</span> <span class="token operator">+</span> a<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> a<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span>something<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            d<span class="token punctuation">.</span><span class="token function">lookHome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    String  color<span class="token punctuation">;</span>    String name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">eat</span><span class="token punctuation">(</span>String something<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> something<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> color<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setColor</span><span class="token punctuation">(</span>String color<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    String  color<span class="token operator">=</span><span class="token string">"黑颜色"</span><span class="token punctuation">;</span>    String name<span class="token operator">=</span><span class="token string">"狗"</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token function">Dog</span><span class="token punctuation">(</span>String color<span class="token punctuation">,</span> String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">eat</span><span class="token punctuation">(</span>String something<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"侧着头吃"</span><span class="token operator">+</span>something<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lookHome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"狗在看家"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> color<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setColor</span><span class="token punctuation">(</span>String color<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    String  color<span class="token operator">=</span><span class="token string">"灰颜色"</span><span class="token punctuation">;</span>    String name<span class="token operator">=</span><span class="token string">"猫"</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Cat</span><span class="token punctuation">(</span>String color<span class="token punctuation">,</span> String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">eat</span><span class="token punctuation">(</span>String something<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"两只前腿死死的抱住"</span><span class="token operator">+</span>something<span class="token operator">+</span><span class="token string">"猛吃"</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">catchMouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"猫在逮老鼠"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> color<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setColor</span><span class="token punctuation">(</span>String color<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//注意事项，多态如何强转</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span>Dog<span class="token punctuation">)</span> a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lookHome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//强制类型转换（没有改变原数据类型）</span>        a<span class="token punctuation">.</span><span class="token function">lookhome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java学习之路--基础知识（二）</title>
      <link href="/2023/071315.html"/>
      <url>/2023/071315.html</url>
      
        <content type="html"><![CDATA[<h1 id="java中字符串基础知识（二）"><a href="#java中字符串基础知识（二）" class="headerlink" title="java中字符串基础知识（二）"></a>java中字符串基础知识（二）</h1><ol><li>String 注意点<br> 字符串的内容是不会发生改变的，它的对象在创建后不能被更改。</li><li>创建字符串对象</li></ol><ul><li>直接复制</li><li>new</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//空参构造：获取一个空白的字符串对象</span> String s1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//传递一个字符串，根据字符串传递的内容再创建一个新的字符串对象</span> String s2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//传递一个字符数组，根据字符数组的内容再创建一个新的字符串对象</span> <span class="token comment" spellcheck="true">//需求：修改字符串的内容 abc->Qbc</span><span class="token comment" spellcheck="true">//abc==>&amp;#123;'a','b','c'&amp;#125;</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chs<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>String s3<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//传递一个字节数组，根据字节的数组的内容在创建一个新的字符串对象</span><span class="token comment" spellcheck="true">//应用场景：在网络中传输的数据其实都是字节信息</span><span class="token comment" spellcheck="true">//我们一般要把字节信息进行转换，转成字符串，此实际需要用到这个构造了</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>String s4<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="3"><li>字符串比较</li></ol><ul><li>基本数据类型比较：比较的是数据值</li><li>引用数据类型比较：比的是地址值</li><li>equals 比较字符串内容是否相等</li></ul><pre class=" language-java"><code class="language-java">String s1<span class="token operator">=</span><span class="token string">"123"</span><span class="token punctuation">;</span>String s2<span class="token operator">=</span><span class="token string">"abc"</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> result1<span class="token operator">=</span>s1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span></code></pre><ul><li>equalsIgnoreCase 比较字符串的内容是否相等，忽略大小写</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">boolean</span> result2<span class="token operator">=</span>s1<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="4"><li>遍历字符串</li></ol><ul><li>public char charAt(int index)： 根据索引返回字符</li><li>public int  length():返回字符串的长度</li><li>注意：数组名.length    字符串对象.length()</li></ul><ol start="5"><li>统计字符个数</li></ol><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//键盘输入一个字符串</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入一个包含大小写字母及数字的字符串"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Scanner r<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        String str<span class="token operator">=</span>r<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> bigCount<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//大写字母数</span>        <span class="token keyword">int</span> smallCount<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//小写字母数</span>        <span class="token keyword">int</span> numCount<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数字字符数</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> temp<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">>=</span><span class="token number">65</span><span class="token operator">&amp;&amp;</span>temp<span class="token operator">&lt;=</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                bigCount<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">>=</span><span class="token number">97</span> <span class="token operator">&amp;&amp;</span> temp<span class="token operator">&lt;=</span><span class="token number">122</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                smallCount<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                numCount<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"大写字母数："</span><span class="token operator">+</span>bigCount<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小写字母数："</span><span class="token operator">+</span>smallCount<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数字字母数："</span><span class="token operator">+</span>numCount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ol start="6"><li>字符串拼接和反转</li></ol><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">reverser</span> <span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String result<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">char</span> c<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            result<span class="token operator">+=</span>c<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ol start="7"><li>字符串截取</li></ol><ul><li>String substring(int beginIndex,int endIndex) 注意：左闭右开</li></ul><pre class=" language-java"><code class="language-java">     String phone<span class="token operator">=</span><span class="token string">"13245698712"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//截取手机号前三位</span>        String start<span class="token operator">=</span> phone<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//截取手机号后四位</span>        String end<span class="token operator">=</span>phone<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//拼接</span>        String result<span class="token operator">=</span>start <span class="token operator">+</span><span class="token string">"****"</span><span class="token operator">+</span>end<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="8"><li>StringBuilder<br>他可以看成一个可变的容器，里面的内容是可以变化的，不像字符串一样不可变，可以提高字符串的操作效率，可以将容器里面的内容反转。</li></ol><ul><li>public StringBuilder append() &#x2F;&#x2F;添加元素</li><li>publick StringBuilder reverse()  &#x2F;&#x2F;反转容器中的内容</li><li>public int length() &#x2F;&#x2F;返回长度</li><li>public String toString()  &#x2F;&#x2F;将StringBuilder 转换成字符串。</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//传统字符串操作</span>String s1<span class="token operator">=</span>s2<span class="token operator">+</span>s3<span class="token operator">+</span>s4<span class="token operator">+</span>s5<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在这个字符串拼接的过程中会产生很多新的字符串。</span>       <span class="token comment" spellcheck="true">//创建对象</span>        StringBuilder sb<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加字符串</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"bbbb"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"2sad"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将StringBuilder 转换成String</span>        sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="9"><li>判断是否是对称字符串</li></ol><pre class=" language-java"><code class="language-java">     <span class="token comment" spellcheck="true">//键盘输入一个字符串</span>        Scanner r<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入一个字符串"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String str<span class="token operator">=</span>r<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建对象</span>        String result<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前字符串是对称字符串"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前字符串不是对称字符串"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ol start="10"><li>StringJoiner<br>它也可以看成一个容器，容器内容是可以变化的；可以提高字符串的操作效率，而且代码编写特备简介，JDK8之后才出现的</li></ol><ul><li>格式<br>  StringJoiner sb&#x3D;new StringJoiner(“间隔符号”，”开始符号”，”结束符号”)</li><li>add(添加的内容) &#x2F;&#x2F;添加数据，并返回对象本身</li><li>length() &#x2F;&#x2F;返回长度</li><li>toString()  &#x2F;&#x2F;转换成字符串</li></ul><ol start="11"><li>字符串原理</li></ol><ul><li>字符串存储内存原理<br>直接赋值的会复用字符串常量池中的；new出来的不会复用，会开辟一个新的内存空间。</li><li>&#x3D;&#x3D; 比较的是什么？<br> 基本类型比较的是值，引用数据类型比较的是地址。</li><li>字符串拼接原理<br> 如果没有变量参与，都是字符串直接相加，编译之后就是拼接之后的结果，会复用串池中的字符串<br> 如果有变量参与，会创建新的字符串，浪费内存。</li><li>StringBuilder 提高效率原理图<br>  所有要拼接的内容都会往StringBulder中放，不会创建很多无用的空间，节约内存。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java学习之路--java常用API</title>
      <link href="/2023/071314.html"/>
      <url>/2023/071314.html</url>
      
        <content type="html"><![CDATA[<h1 id="java中常用的API方法"><a href="#java中常用的API方法" class="headerlink" title="java中常用的API方法"></a>java中常用的API方法</h1><h2 id="一、Math"><a href="#一、Math" class="headerlink" title="一、Math"></a>一、Math</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//获取参数绝对值</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">ceil</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//向上取整</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">floor</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//向下取整</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//求最大值</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">,</span><span class="token keyword">double</span> b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//返回a的b次幂的值</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//获取double类型随机数，[0.0,1.0)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">round</span><span class="token punctuation">(</span><span class="token keyword">float</span> a<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//四舍五入</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//开平方</span></code></pre><h2 id="二、System"><a href="#二、System" class="headerlink" title="二、System"></a>二、System</h2><ul><li>时间原点： 1970年1月1日 0：0：0 (我国在东8区，有八小时时差)</li></ul><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token keyword">int</span> status<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//结束java虚拟机  0-正常停止  非0--异常停止</span> publick <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">currentTimeMills</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//获取当前时间的毫秒值\</span> publick sttaic <span class="token keyword">void</span> <span class="token function">arrayCopy</span><span class="token punctuation">(</span>数据源数组，起始索引，目的数组，起始索引，拷贝个数<span class="token punctuation">)</span>  拷贝数组</code></pre><h2 id="三、Object"><a href="#三、Object" class="headerlink" title="三、Object"></a>三、Object</h2><ul><li>顶级父类中只有无参构造方法；</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Object成员方法</span> <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//转换成字符串</span> <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> 比较两个对象是否 相等 <span class="token keyword">protected</span> Object <span class="token function">clone</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> 对象克隆</code></pre><h2 id="四、正则表达式"><a href="#四、正则表达式" class="headerlink" title="四、正则表达式"></a>四、正则表达式</h2><ol><li>基本知识<br>&#x2F;&#x2F;字符类（只匹配一个字符）</li></ol><table><thead><tr><th>字符类</th><th>含义</th></tr></thead><tbody><tr><td>[abc]</td><td>只能是a,b或者c</td></tr><tr><td>[^abc]</td><td>除了a,b,c之外的任意字符</td></tr><tr><td>[a-zA-Z]</td><td>a到z,A到Z</td></tr><tr><td>[a-d [m-p]]</td><td>a到d 或 m到p</td></tr><tr><td>[ a-z &amp;&amp; [def]]</td><td>a-z 和def的交集，即d,e,f</td></tr><tr><td>[a&#x3D;z&amp;&amp; [^bc]]</td><td>a-z和非bc的交集</td></tr><tr><td>.</td><td>任何字符</td></tr><tr><td>\d</td><td>一个数字[0-9]</td></tr><tr><td>\D</td><td>非数字[^0-9]</td></tr><tr><td>\s</td><td>一个空白字符[\t\n\x0B\f\r]</td></tr><tr><td>\S</td><td>非空白字符 [^\s]</td></tr><tr><td>\w</td><td>[a-zA-Z_0-9]</td></tr><tr><td>\W</td><td>[^\w] 一个非单词字符</td></tr><tr><td>X?</td><td>X,一次或者0次</td></tr><tr><td>X*</td><td>X,0次或者多次</td></tr><tr><td>X+</td><td>X,1次或者多次</td></tr><tr><td>X{n}</td><td>X，正好n次</td></tr><tr><td>X{n,}</td><td>X，至少n次</td></tr><tr><td>X{m,n}</td><td>X，至少m,但不能超过n次</td></tr><tr><td>(?i)</td><td>忽略后面字符的大小写</td></tr><tr><td>?</td><td>代表前面的数据</td></tr><tr><td>？&#x3D;</td><td>获取前面的数据</td></tr><tr><td>？:</td><td>获取所有数据</td></tr><tr><td>？！</td><td>获取不是指定内容的前面部分</td></tr><tr><td>\ \组号</td><td>表示把第几组的内容再出来用一次</td></tr><tr><td>$组号</td><td>正则外面使用的，代表那一组的数据</td></tr></tbody></table><p>&#x2F;&#x2F;非贪婪爬取，尽可能少的获取数据 ，如 +？    *？<br>&#x2F;&#x2F;贪婪爬取 ，尽可能多的获取数据 如+   *</p><p>&#x2F;&#x2F; public boolean mathes(String regx)：判断是否与正则表达式匹配，匹配返回true<br>&#x2F;&#x2F; 注意\等价于<br>&#x2F;&#x2F; \转义字符，会改变后面字符的含义</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//匹配多个字符</span>    <span class="token comment" spellcheck="true">//以字符串形式打印一个双引号</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//表示字母数字下划线组成的的单词长度至少为6</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>                <span class="token string">"54d5asd"</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">"\\w&amp;#123;6,&amp;#125;"</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="2"><li>校验手机号</li></ol><pre class=" language-java"><code class="language-java">String regx<span class="token operator">=</span><span class="token string">"1[3-9]\\d&amp;#123;9&amp;#125;"</span><span class="token punctuation">;</span></code></pre><ol start="3"><li>验证邮箱</li></ol><pre class=" language-java"><code class="language-java">String regx<span class="token operator">=</span><span class="token string">"\\w+@[\\w&amp;&amp;][^_]]&amp;#123;2,6&amp;#125;.[a-zA-Z]&amp;#123;2,3&amp;#125;&amp;#123;1,2&amp;#125;"</span></code></pre><ol start="4"><li>验证身份证</li></ol><pre class=" language-java"><code class="language-java">        <span class="token comment" spellcheck="true">//身份证简单校验</span>        String regx<span class="token operator">=</span><span class="token string">"[1-9]\\d&amp;#123;16&amp;#125;(\\dXx)"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//身份证复杂校验</span>        String regx<span class="token operator">=</span><span class="token string">"[1-9]\\d&amp;#123;5&amp;#125;(18|19|20)\\d&amp;#123;2&amp;#125;(0[1-9]|1[0-2])(0[1-9]|[12]\\d|3[01])\\d&amp;#123;3&amp;#125;[\\dXx]"</span></code></pre><ol start="5"><li>爬虫</li></ol><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//爬取字符串中的所有的JavaXX</span>        String str <span class="token operator">=</span> <span class="token string">"JavaXX双卡单卡圣诞节,dsada+5585,Java12刷卡的话！！！Java14啥的回家啊我顶我顶,Java10等级考试亲爱是"</span> <span class="token operator">+</span>                <span class="token string">"都会撒谎的教案设计的t贺卡收到水水水水水水水水水水Java15,&amp;#123;sdasd&amp;#125;sdasdadJava2ds"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取正则表达式对象</span>        Pattern p<span class="token operator">=</span> Pattern<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"Java\\d&amp;#123;0,2&amp;#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取文本匹配器的对象</span>        Matcher m<span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//利用循环获取</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            String s<span class="token operator">=</span>m<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//结果</span>        <span class="token comment" spellcheck="true">//  Java</span>        <span class="token comment" spellcheck="true">//  Java12</span>        <span class="token comment" spellcheck="true">//  Java14</span>        <span class="token comment" spellcheck="true">//  Java10</span>        <span class="token comment" spellcheck="true">//  Java15</span>        <span class="token comment" spellcheck="true">//  Java2</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Pattern:表示正则表达式</span>        <span class="token comment" spellcheck="true">//Matcher: 文本匹配器，作用按照正则表达式规则去读取字符串，从头开始读取。</span>        <span class="token comment" spellcheck="true">//在大串中去找符合规则的子串。</span>        <span class="token comment" spellcheck="true">//获取正则表达式对象</span>        Pattern p<span class="token operator">=</span> Pattern<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"Java\\d&amp;#123;0,2&amp;#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取文本匹配的对象</span>        Matcher m<span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//拿着我呢本匹配器从头开始读取，寻找是否有满足规则的子串</span>        <span class="token comment" spellcheck="true">//没有，返回false</span>        <span class="token comment" spellcheck="true">//有，就返回true.在底层记录子串的起始索引和结束索引+1</span>        <span class="token keyword">boolean</span> b<span class="token operator">=</span>m<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//方法底层会根据find方法记录的索引进行i字符串的截取</span>        <span class="token comment" spellcheck="true">//subString(起始索引，结束索引);包头不包尾</span>        <span class="token comment" spellcheck="true">//会把截取的小串进行返回</span>        String s1<span class="token operator">=</span>m<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//第二次在调用find时候，会继续读取后面的内容，</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ol start="5"><li>分组</li></ol><ul><li>定义： 分组就是一个小括号</li><li>捕获分组（ 就是把这一组的数据捕获出来，再用一次）</li></ul><pre class=" language-java"><code class="language-java">     <span class="token comment" spellcheck="true">//需求1 判断一个字符的开始字符和结束字符是否一致，只考虑一个字符</span>        <span class="token comment" spellcheck="true">//   \\组号，表示把第几组的内容再出来用一次</span>        String regex1<span class="token operator">=</span><span class="token string">"(.).+\\1"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a123a"</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&amp;12323&amp;"</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a123b"</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>        <span class="token comment" spellcheck="true">//需求2 判断一个字符的开始部分和结束部分是否一致？可以有多个字符</span>        String regex2<span class="token operator">=</span><span class="token string">"(.+).+\\1"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"abc123abc"</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"!&amp;12323&amp;!"</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"123456789123"</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>        <span class="token comment" spellcheck="true">//需求3 判断一个字符串的开始部分和结束部分是否一致？开始部分内每个字符也需要一致</span>        <span class="token comment" spellcheck="true">//举例 aaa123aaa 111789111  &amp;&amp;abc&amp;&amp; abc123abc</span>        <span class="token comment" spellcheck="true">// (.) 把首字母看作一组</span>        <span class="token comment" spellcheck="true">// \\2把首字母拿出来再次使用</span>        <span class="token comment" spellcheck="true">// * 作用于\\2 ，表示后面出现的内容出现0次或者多次</span>        String regex3<span class="token operator">=</span><span class="token string">"((.)\\2*).+\\1"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"aaa123aaa"</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"111789111"</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&amp;&amp;abc&amp;&amp; "</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"abc123abc "</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span><span class="token comment" spellcheck="true">//案例：口吃替换</span><span class="token comment" spellcheck="true">// 将字符串： 我要学学编编编程程程程程程程</span><span class="token comment" spellcheck="true">// 替换为： 我要学编程</span>    String str<span class="token operator">=</span><span class="token string">"我要学学编编编程程程程程程"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    $1 表示把第一组的东西，继续拿出来用</span>  String s1<span class="token operator">=</span>  str<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"(.)\\1+"</span><span class="token punctuation">,</span><span class="token string">"$1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>非捕获分组 :分组之后不需要再用本组的数据，仅仅是把数据括起来<br>特点：不占用组号</li></ul><h2 id="五、JDK时间"><a href="#五、JDK时间" class="headerlink" title="五、JDK时间"></a>五、JDK时间</h2><ol><li>SimpleDateFormat类（格式化，解析）</li></ol><pre class=" language-java"><code class="language-java">   <span class="token comment" spellcheck="true">//   public SimpleDateFormat()  默认格式</span>   <span class="token comment" spellcheck="true">//  public SimpleDateFormat(String pattern) 指定格式</span>        <span class="token comment" spellcheck="true">//1.利用空参构造创建SimpleDateFormat对象</span>        SimpleDateFormat sdf1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Date d1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>0L<span class="token punctuation">)</span><span class="token punctuation">;</span>            String str1<span class="token operator">=</span>sdf1<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//  1970/1/1 上午8:00</span>        <span class="token comment" spellcheck="true">//2.利用带参构造创建SimpleDateFormat对象，指定格式</span>        SimpleDateFormat sdf2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy年MM月dd日 HH：mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String str2<span class="token operator">=</span>sdf2<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//1970年01月01日 08：00:00</span>      <span class="token comment" spellcheck="true">//public final String format(Date date) //格式化（日期对象-->字符串）</span>      <span class="token comment" spellcheck="true">//public Date parse(String source)     解析（字符串-->日期对象）</span>                  <span class="token comment" spellcheck="true">//定义一个字符串表示时间</span>        String str<span class="token operator">=</span><span class="token string">"2023-11-11 11:11:11"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1.利用有参构造创建SimpleDateFormat对象 注意：创建对象的格式要跟字符串格式完全一致</span>        SimpleDateFormat sdf3<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH：mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Date date <span class="token operator">=</span>sdf3<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//打印毫秒数</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="2"><li>Calendar 代表了系统当前时间的日历对象，可以单独修改，获取时间中的年月日<br>注意： Calendar 是一个抽象类，不能直接创建对象。</li></ol><pre class=" language-java"><code class="language-java">       <span class="token comment" spellcheck="true">/*              public static Calendar getInstance()  获取当前时间的日历对象              public final Date getTime()  获取日期对象              public final setTime(Date date) 给日历设置日期对象              public  long  getTimeInMills()  拿到时间毫秒值              public  void  setTimeInMills(long millis) 给日历设置时间毫秒值              public int get(int field ) 取日期中的某个字段信息              public void set(int field ,int value)修改日历的某个字段信息              public void add(int field ,int amount) 为某个字段增加或者减少指定的值         * */</span><span class="token comment" spellcheck="true">//        1. 获取日历对象</span>        <span class="token comment" spellcheck="true">//细节1： Calendar 是一个抽象类，不能直接new,而是通过一个静态方法获取到子类对象</span><span class="token comment" spellcheck="true">//        底层原理：</span><span class="token comment" spellcheck="true">//        会根据系统的不同时区来获取不同的日历对象，默认表示当前时间。</span><span class="token comment" spellcheck="true">//        会把时间中的 纪元，年，月，日，时，分，秒，星期，等等的都放在一个数组当中。</span>        <span class="token comment" spellcheck="true">// 0-纪元，1-年 ，2-月，3--一年的第几周，4-一个月中的第几周，5-一个月的第几天date...16</span>        <span class="token comment" spellcheck="true">//细节2：</span>        <span class="token comment" spellcheck="true">//月份： 范围0-11， 0代表1月</span>        <span class="token comment" spellcheck="true">//星期 ：   1-星期日  2-星期一 ...</span>        Calendar c<span class="token operator">=</span>Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2，修改日历时间</span>        Date d<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>0L<span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"日历"</span><span class="token operator">+</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//日历java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id="Asia/Shanghai",offset=28800000,dstSavings=0,useDaylight=false,transitions=31,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=28800000,DST_OFFSET=0]</span>        <span class="token keyword">int</span> year<span class="token operator">=</span>c<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> month<span class="token operator">=</span>c<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> date <span class="token operator">=</span>c<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>year<span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>month<span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1970,0,1</span></code></pre><p>3.jdk8时间类<br>原因： jdk8的代码更加简单，而且更加安全；JDK7多线程环境下会导致数据安全问题<br>&#x2F;&#x2F;细节：JDK8新增的时间对象都是不可变的，，如果修改了时间，实际会产生一个新的时间。</p><pre class=" language-java"><code class="language-java">   <span class="token comment" spellcheck="true">//1. ZoneId  时区</span>         <span class="token comment" spellcheck="true">//获取所有时区名称</span><span class="token comment" spellcheck="true">//        Set&lt;String > zoneIds= ZoneId.getAvailableZoneIds();</span>        <span class="token comment" spellcheck="true">//获取当前系统的默认时区</span>        ZoneId zoneId <span class="token operator">=</span> ZoneId<span class="token punctuation">.</span><span class="token function">systemDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取指定的时区</span>        ZoneId<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"Asia/Pontianak"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//--------------------------------------------------</span>        <span class="token comment" spellcheck="true">//2. Instant  时间戳</span>        <span class="token comment" spellcheck="true">//获取当前时间的Instant对象（标准时间）</span>        Instant<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2023-07-13T10:49:59.338231400Z</span>        <span class="token comment" spellcheck="true">//根据（秒/毫秒/纳秒）获取Instant对象</span>        Instant instant1 <span class="token operator">=</span> Instant<span class="token punctuation">.</span><span class="token function">ofEpochMilli</span><span class="token punctuation">(</span>0L<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1970-01-01T00:00:00Z</span>        Instant instant2 <span class="token operator">=</span> Instant<span class="token punctuation">.</span><span class="token function">ofEpochSecond</span><span class="token punctuation">(</span>1L<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1970-01-01T00:00:01Z</span>        Instant instant3 <span class="token operator">=</span> Instant<span class="token punctuation">.</span><span class="token function">ofEpochSecond</span><span class="token punctuation">(</span>1L<span class="token punctuation">,</span> 1000000000L<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1970-01-01T00:00:02Z</span>        <span class="token comment" spellcheck="true">//指定时区</span>        ZonedDateTime time <span class="token operator">=</span>Instant<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">atZone</span><span class="token punctuation">(</span>ZoneId<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"Asia/Shanghai"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2023-07-13T18:49:32.343855900+08:00[Asia/Shanghai]</span>        <span class="token comment" spellcheck="true">//isXxx判断</span>        Instant instant4<span class="token operator">=</span>Instant<span class="token punctuation">.</span><span class="token function">ofEpochMilli</span><span class="token punctuation">(</span>0L<span class="token punctuation">)</span><span class="token punctuation">;</span>        Instant instant5<span class="token operator">=</span>Instant<span class="token punctuation">.</span><span class="token function">ofEpochMilli</span><span class="token punctuation">(</span>1000L<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//用于时间判断</span>        <span class="token comment" spellcheck="true">//ifBefore: 判断调用者代表的时间是否在参数表示时间的前面</span>        <span class="token keyword">boolean</span> result1<span class="token operator">=</span>instant4<span class="token punctuation">.</span><span class="token function">isBefore</span><span class="token punctuation">(</span>instant5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>        <span class="token comment" spellcheck="true">//ifAfter: 判断调用者代表的时间是否在参数表示时间的后面</span>        <span class="token keyword">boolean</span> result2<span class="token operator">=</span>instant4<span class="token punctuation">.</span><span class="token function">isBefore</span><span class="token punctuation">(</span>instant5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span><span class="token comment" spellcheck="true">//        Instant minusXxx(long millisToSubtract) 减少时间系列方法</span>        Instant Instant6<span class="token operator">=</span>Instant<span class="token punctuation">.</span><span class="token function">ofEpochMilli</span><span class="token punctuation">(</span>3000L<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1970-01-01T00:00:03Z</span>        Instant instant7 <span class="token operator">=</span> Instant6<span class="token punctuation">.</span><span class="token function">minusSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1970-01-01T00:00:02Z</span><span class="token comment" spellcheck="true">//-----------------------------------------------</span>        <span class="token comment" spellcheck="true">//3. zoneDateTime</span>        <span class="token comment" spellcheck="true">//获取当前时间对象（带时区）</span>        ZonedDateTime now <span class="token operator">=</span>ZonedDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2023-07-13T19:05:34.415003500+08:00[Asia/Shanghai]</span>        <span class="token comment" spellcheck="true">//指定时间对象（带时区）</span>        <span class="token comment" spellcheck="true">//年月日时分秒纳秒方式指定</span>        ZonedDateTime time1<span class="token operator">=</span>ZonedDateTime<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2023</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>ZoneId<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"Asia/Shanghai"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>time1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2023-10-01T11:12:12+08:00[Asia/Shanghai]</span>        <span class="token comment" spellcheck="true">//通过Instant +时区的方式指定获取时间对象</span>        Instant instant <span class="token operator">=</span>Instant<span class="token punctuation">.</span><span class="token function">ofEpochMilli</span><span class="token punctuation">(</span>0L<span class="token punctuation">)</span><span class="token punctuation">;</span>        ZoneId zoneId1<span class="token operator">=</span>ZoneId<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"Asia/Shanghai"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ZonedDateTime time2<span class="token operator">=</span>ZonedDateTime<span class="token punctuation">.</span><span class="token function">ofInstant</span><span class="token punctuation">(</span>instant<span class="token punctuation">,</span>zoneId<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>time2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//1970-01-01T08:00+08:00[Asia/Shanghai]</span><span class="token comment" spellcheck="true">//        withXxx修改时间方法</span>        ZonedDateTime time3<span class="token operator">=</span>time2<span class="token punctuation">.</span><span class="token function">withYear</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>time3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2000-01-01T08:00+08:00[Asia/Shanghai]</span><span class="token comment" spellcheck="true">//            减少时间</span>        ZonedDateTime time4<span class="token operator">=</span>time3<span class="token punctuation">.</span><span class="token function">minusYears</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>time4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1500-01-01T08:00+08:05:43[Asia/Shanghai]</span>       <span class="token comment" spellcheck="true">//增加时间</span>        ZonedDateTime time5<span class="token operator">=</span>time4<span class="token punctuation">.</span><span class="token function">plusYears</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>time5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1700-01-01T08:00+08:05:43[Asia/Shanghai]</span>        <span class="token comment" spellcheck="true">//-----------------------------------</span><span class="token comment" spellcheck="true">// 4. DateTimeFormatter  用于时间的格式化和解析</span>        <span class="token comment" spellcheck="true">//获取时间对象</span>        ZonedDateTime t1<span class="token operator">=</span>Instant<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">atZone</span><span class="token punctuation">(</span>ZoneId<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"Asia/Shanghai"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//解析/格式化器</span>        DateTimeFormatter dtf1<span class="token operator">=</span>DateTimeFormatter<span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss EE a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//格式化</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dtf1<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2023-07-13 21:52:47 周四 下午</span><span class="token comment" spellcheck="true">//------------------------------------</span>        <span class="token comment" spellcheck="true">//5.LocalDate ，LocalTime,localDateTime</span>        <span class="token comment" spellcheck="true">//获取当前时间的日历对象（包括年月日）</span>        LocalDate nowDate<span class="token operator">=</span>LocalDate<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>nowDate<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2023-07-13</span>        <span class="token comment" spellcheck="true">//获取指定的时间的日历对象</span>        LocalDate ldDate<span class="token operator">=</span>LocalDate<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2023</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"指定日期"</span><span class="token operator">+</span>ldDate<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指定日期2023-01-01</span><span class="token comment" spellcheck="true">//        get系列方法获取日历中的每一个属性值</span>        <span class="token comment" spellcheck="true">//获取年</span>        <span class="token keyword">int</span> year<span class="token operator">=</span>ldDate<span class="token punctuation">.</span><span class="token function">getYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取月</span>        Month m<span class="token operator">=</span>ldDate<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 或者</span>        <span class="token keyword">int</span> month<span class="token operator">=</span>ldDate<span class="token punctuation">.</span><span class="token function">getMonthValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取日</span>        <span class="token keyword">int</span> day<span class="token operator">=</span>ldDate<span class="token punctuation">.</span><span class="token function">getDayOfMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取一年的第几天</span>        <span class="token keyword">int</span> dayOfYear <span class="token operator">=</span>ldDate<span class="token punctuation">.</span><span class="token function">getDayOfYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"dayofyear"</span> <span class="token operator">+</span>dayOfYear<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//dayofyear1</span>        <span class="token comment" spellcheck="true">//获取星期</span>        DayOfWeek dayOfWeek<span class="token operator">=</span>ldDate<span class="token punctuation">.</span><span class="token function">getDayOfWeek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"dayOfWeek"</span><span class="token operator">+</span>dayOfWeek<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//dayOfWeekSUNDAY</span><span class="token comment" spellcheck="true">//        is开头的方法表示判断</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ldDate<span class="token punctuation">.</span><span class="token function">isBefore</span><span class="token punctuation">(</span>ldDate<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ldDate<span class="token punctuation">.</span><span class="token function">isAfter</span><span class="token punctuation">(</span>ldDate<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//with 开头的方法表示修改，只能修改年月日</span>        LocalDate withLocalDate<span class="token operator">=</span>ldDate<span class="token punctuation">.</span><span class="token function">withYear</span><span class="token punctuation">(</span><span class="token number">1999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>withLocalDate<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1999-01-01</span>        <span class="token comment" spellcheck="true">//minus 开头的方法表示减少，只能减少年月日，plus相反</span>        LocalDate minusLocalDate<span class="token operator">=</span>ldDate<span class="token punctuation">.</span><span class="token function">minusYears</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>minusLocalDate<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1923-01-01</span>        LocalDate plusLocalDate<span class="token operator">=</span>ldDate<span class="token punctuation">.</span><span class="token function">plusYears</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>plusLocalDate<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2223-01-01</span>        <span class="token comment" spellcheck="true">//工具类</span>        <span class="token comment" spellcheck="true">//duration 时间间隔（秒，纳秒）</span>        <span class="token comment" spellcheck="true">//Period 时间间隔 （年月日）</span>        <span class="token comment" spellcheck="true">//ChronoUnit: 时间间隔 （所有单位）</span></code></pre><ol start="4"><li>包装类</li></ol><pre class=" language-java"><code class="language-java">  <span class="token number">1</span><span class="token punctuation">.</span> 利用构造方法获取Integer对象（jdk5之前）<span class="token comment" spellcheck="true">//        Integer i1=new Integer(1);</span>        <span class="token comment" spellcheck="true">//        Integer i4=new Integer(1);</span>        <span class="token comment" spellcheck="true">// System.out.println(i1==i4);//false</span><span class="token comment" spellcheck="true">//        2. 利用静态方法获取</span>        Integer i2<span class="token operator">=</span>Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer i3<span class="token operator">=</span>Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i2<span class="token operator">==</span>i3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>        Integer i4<span class="token operator">=</span>Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer i5<span class="token operator">=</span>Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i4<span class="token operator">==</span>i5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>        <span class="token comment" spellcheck="true">//细节：因为再实际开发中，-128——127之间的数据用的比较多，每次都是new一个对象，太浪费内存了，所以提前把这个范围之内的每一个数据都创建好对象，如果用到这个数据，则就返回创建好的对象</span></code></pre><ol start="5"><li>综合案例练习</li></ol><pre class=" language-java"><code class="language-java">   <span class="token comment" spellcheck="true">/*   键盘录入1-100之间的整数，并添加到集合中，直到集合中所有数据总和超过200为止。   * */</span><span class="token comment" spellcheck="true">//创建一个集合对象</span>        ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span>list <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//键盘录入数据，并添加到集合中</span>        Scanner r<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入一个整数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          String numStr<span class="token operator">=</span>r<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//将字符串转换为整数</span>          <span class="token keyword">int</span> num<span class="token operator">=</span>Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>numStr<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">||</span>num<span class="token operator">></span><span class="token number">100</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前数字不在1-100以内，请重新输入"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">continue</span><span class="token punctuation">;</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//添加到集合中</span>          <span class="token comment" spellcheck="true">//再添加数据的时候，触发了自动装箱，即num自动转换为Integer类型</span>          list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//统计集合中所有的数据和</span>          <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token function">getSum</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//对sum进行判断</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">></span><span class="token number">200</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"集合中所有元素的数据和已经满足"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getSum</span><span class="token punctuation">(</span>ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> num<span class="token operator">=</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            sum<span class="token operator">+=</span>num<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客搭建教程</title>
      <link href="/2023/062212.html"/>
      <url>/2023/062212.html</url>
      
        <content type="html"><![CDATA[<h1 id="博客搭建教程（hexo-matery-github）"><a href="#博客搭建教程（hexo-matery-github）" class="headerlink" title="博客搭建教程（hexo+matery+github）"></a>博客搭建教程（hexo+matery+github）</h1><h2 id="一、参考博客链接"><a href="#一、参考博客链接" class="headerlink" title="一、参考博客链接"></a>一、参考博客链接</h2><ol><li>第一步我们首要先配好电脑的node.js环境<blockquote><p><a href="https://blog.csdn.net/antma/article/details/86104068">node.js 安装详细步骤教程_node.js安装教程_程序员老油条的博客-CSDN博客</a></p></blockquote></li><li>第二步，安装好node环境之后，开始安装hexo<blockquote><p><a href="https://zhuanlan.zhihu.com/p/105715224">hexo安装教程</a></p></blockquote></li></ol><ul><li>上面这个教程中要注意的点 （1）在github上面的创建的仓库名必须是   《 用户名.github.io 》形式;（2）配置_config.xml时候，其中要写入我们的github仓库的地址，注意 在这里要把github上面的token密钥 加入到git仓库地址当中，形式如下<br><img src="https://s2.loli.net/2023/06/21/Tw7efY46Up1gEyq.png" alt="exam1.png"><br>（3）在跟着教程安装hexo的时候，可能会遇到以下这种情况<br><img src="https://s2.loli.net/2023/06/21/dA5KqEUybpk8rST.png" alt="em2.png"><br>这是因为themes文件下的主题文件名和配置中的theme名字不同导致的，仅需修改themes文件的名字跟config中配置的theme主题一样。<br><img src="https://s2.loli.net/2023/06/21/Lhq1Kr54WywCZNM.png" alt="em3.png"></li></ul><ol start="3"><li>使用github国内最常见的就是github访问过慢问题，此时推荐一个参考链接，亲测有一定效果<blockquote><p><a href="https://blog.csdn.net/qq_41176055/article/details/128496628">缓解国内github访问过慢问题</a></p></blockquote></li><li>最后一步就是根据教程，进行matery主题深度优化配置<blockquote><p><a href="https://zhuanlan.zhihu.com/p/104336960">基于matery主题深度优化配置</a></p></blockquote></li></ol><h2 id="二、实践过程中遇到的问题及解决方法"><a href="#二、实践过程中遇到的问题及解决方法" class="headerlink" title="二、实践过程中遇到的问题及解决方法"></a>二、实践过程中遇到的问题及解决方法</h2><ol><li>由于期间电脑进行了重置，没有保存电脑中的博客源文件，又重新构建了一个博客，所以第一件事，先将构建好的博客源码 保存起来，我这是里在github上面 又新建了一个hexo分支，然后在本地上新建一个空文件夹，从仓库中拉取下来，并切换到hexo分支，删掉拉取下来的所有内容，只保存.git文件，然后将hexo文件中的源码及配置文件 复制过来，上传到github当中</li><li>重置电脑之后，期间遇到一个安装某些包时，询问是否要捐款的报错，如下图<br><img src="https://s2.loli.net/2023/06/21/wqj84GvmJ6ZUzcP.png" alt="em4.png"><br>解决方法：在控制台中或者git bash 中输入以下代码</li></ol><pre class=" language-javaScript"><code class="language-javaScript">npm config set fund false --global</code></pre><ol start="3"><li>给博客增加一个评论功能，可以参考下列文章<br><a href="https://blog.csdn.net/vpqtxzmzezeqjj9977/article/details/123010779">hexo添加评论功能</a></li><li>在保存hexo源码的时候，遇到一个问题，由于把hexo源码的配置文件也提交到github当中，github检测到存在token，导致上一个token失效，从而新申请了一个token，在hexo的config.yml中的仓库地址切换最新的token，一直报如下这个错误。<br><img src="https://s2.loli.net/2023/06/22/E6d8WwiUoOGpnXP.png" alt="em6.png"><br>解决方法： 去掉config.yml中仓库地址的token,然后直接重新 hexo clean,hexo g , hexo d ，然后从会弹出一个弹窗，选择用code验证登录 ，下次继续（hexo cl,hexo g ,hexo d）时，可以直接登录。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/062116107.html"/>
      <url>/2023/062116107.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>flex布局实现及应用</title>
      <link href="/2023/061811.html"/>
      <url>/2023/061811.html</url>
      
        <content type="html"><![CDATA[<h1 id="flex布局详解及应用"><a href="#flex布局详解及应用" class="headerlink" title="flex布局详解及应用"></a>flex布局详解及应用</h1><h2 id="一、flex布局知识点详细介绍"><a href="#一、flex布局知识点详细介绍" class="headerlink" title="一、flex布局知识点详细介绍"></a>一、flex布局知识点详细介绍</h2><p>首先看完官方文档中flex布局的基本知识点<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox">flex布局基本概念</a></p><ol><li>子元素注意点</li></ol><ul><li>flex-grow 是指项在 flex 容器中分配“剩余空间”的相对比例，默认为0</li><li>flex-shrink 元素仅在默认宽度之和大于容器的时候才会发生收缩，其收缩的大小是依据 flex-shrink 的值,默认为1</li><li>flex-basis 指定了 flex 元素在主轴方向上的初始大小(优先级高于width);如果没有分配尺寸，会采用元素内容的尺寸。</li><li>Flex 简写形式允许你把三个数值按这个顺序书写 — flex-grow，flex-shrink，flex-basis。</li><li>flex: initial相当于0 1 auto;flex:auto 相当于1 1 auto;flex:none 相当于 0 0 auto;flex:1 相当于1 1 0 ;flex:2 相当于 2 1 0;</li></ul><hr><ul><li>align-self: 用于对齐单个flex子项(stretch,flex-end,flex-start,center,baseline,auto)</li><li>order: 指定单个项目的顺序，默认为0</li></ul><ol start="2"><li>父元素注意点</li></ol><ul><li>align-items:如果子元素没有定义高度，默认会在交叉轴方向拉伸到最高元素的高度。(stretch,flex-end,flex-start,center,baseline)</li><li>justify-content:(flex-end,flex-start,center,space-between(元素之间间隔相等),space-around(每个元素的左右空间相等))</li><li>align-content：flex 容器的 height 要大于 flex 项目的可视内容。然后它会将所有的 flex 项目打包成一块之后再对齐剩下的空间。(flex-end,flex-start,center,space-between(元素之间间隔相等),space-around(每个元素的左右空间相等),stretch)</li><li>gap: 分为row-gap,column-gap 来控制每个子元素之间的间隔，默认为0</li></ul><h2 id="二、flex布局应用示例"><a href="#二、flex布局应用示例" class="headerlink" title="二、flex布局应用示例"></a>二、flex布局应用示例</h2><ol><li>水平元素居中</li></ol><pre class=" language-javaScript"><code class="language-javaScript">  .triangle &#123;    border: 1px solid red;    width: 500px;    height: 400px;    margin: 70px auto;    display: flex;    align-items: center;    justify-content: center;  &#125;  .d1 &#123;    width: 250px;    height: 250px;    background-color: pink;    ;  &#125;</code></pre><ol start="2"><li>实现圣杯布局（面从上到下，分成三部分：头部（header），躯干（body），尾部（footer）。其中躯干又水平分成三栏：从左到右为：导航、主栏、副栏）</li></ol><pre class=" language-javaScript"><code class="language-javaScript">   .grail &#123;    display: flex;    flex-direction: column;    align-items: stretch;    text-align: center;  &#125;  .grail div &#123;    flex: 1  &#125;  .header,  .footer &#123;    line-height: 100px;    background-color: red;  &#125;  .section &#123;    background-color: pink;    display: flex;  &#125;  .leftAside,  .rightAside &#123;    background-color: blue;    line-height: 400px;  &#125;  .header,  .footer,  .leftAside,  .rightAside &#123;    flex: 0 0 20% !important;  &#125;</code></pre><p>   效果展示：<br>  <img src="https://s2.loli.net/2023/06/21/AhzS6YfE7v2cFGL.png" alt="圣杯布局"><br>3. 双飞翼布局，就是两端固定宽高，中间自适应的三栏布局。</p><pre class=" language-javaScript"><code class="language-javaScript">    .grail &#123;    display: flex;    align-items: center;    text-align: center;    line-height: 400px;  &#125;  .grail div &#123;    flex: 1  &#125;  .leftAside,  .rightAside &#123;    background-color: blue;    flex: 0 0 200px !important;  &#125;  .main &#123;    background-color: yellow;    flex: 1  &#125;</code></pre><p>效果展示：<br><img src="https://s2.loli.net/2023/06/21/2AslX1C4gwGiVvY.png" alt="双飞翼布局效果图"><br>4. footer底部栏固定</p><pre class=" language-javaScript"><code class="language-javaScript">  .grail &#123;    display: flex;    align-items: stretch;    flex-direction: column;    text-align: center;    min-height: 400px;  &#125;  .main &#123;    background-color: yellow;    flex: 1;  &#125;  .header,  .footer &#123;    background-color: red;  &#125;</code></pre><p>效果展示：<br><img src="https://s2.loli.net/2023/06/21/Qpes3LE6H1RxCay.png" alt="底部固定"></p><h2 id="三、各类布局优缺点"><a href="#三、各类布局优缺点" class="headerlink" title="三、各类布局优缺点"></a>三、各类布局优缺点</h2><p>例如：如何实现 高度已知，两端宽度固定，中间自适应？</p><ol><li>flex布局<br> 优点：css3新特性，简单快捷，目前主流布局方式，解决旧特性定位时产生元素脱离文档流问题。<br>缺点：仅支持 IE9 以上浏览器。<br>解决方案：自适应div : flex:1</li><li>绝对定位<br>优点：简单直接；<br>缺点：绝对定位同float布局一样会脱离文档流，高度塌陷问题。<br>出现高度塌陷问题，<strong>可创建BFC来解决，</strong>直接给父容器添加 overflow: auto; 或 hidden、scroll等。</li><li>float布局<br>优点：比较简单，兼容性好；<br>缺点：浮动会使元素脱离文档流，容易出现高度塌陷等问题，需做好清理浮动(BFC 块级格式化上下文)。<br>解决方式：通过创建BFC来解决这些问题<br>（1）float 除了none以外的值<br>（2）overflow 除了visible 以外的值（hidden，auto，scroll ）<br>（3）display (table-cell，table-caption，inline-block, flex, inline-flex)<br>（4）position值为（absolute，fixed）<br>（5）fieldset元素</li><li>Grid网格布局<br> 优点：可将网页划分成不同的网格，任意组合不同布局，可以实现以前只能通过诸如Bootstrapcss第三方框架的布局效果。<br>缺点：css 实验性新特性，在浏览器中还没有得到广泛的支持。<br>参考教程：<a href="https://link.csdn.net/?target=http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html">Grid详细讲解</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> flex </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客JS中等难度编程题解析总结</title>
      <link href="/2023/061634537.html"/>
      <url>/2023/061634537.html</url>
      
        <content type="html"><![CDATA[<h1 id="牛客JS编程题（中等难度）"><a href="#牛客JS编程题（中等难度）" class="headerlink" title="牛客JS编程题（中等难度）"></a>牛客JS编程题（中等难度）</h1><h2 id="1-输出实现直角三角形-JS1"><a href="#1-输出实现直角三角形-JS1" class="headerlink" title="1.输出实现直角三角形(JS1)"></a>1.输出实现直角三角形(JS1)</h2><p>（1）解法1，封装成一个函数，利用循环+repeat来解</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">var</span> triangle <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.triangle'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">rightAngle</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">''</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//repeat(n) 重复复制一个字符串n次</span>        str <span class="token operator">+</span><span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token template-string"><span class="token string">`&lt;br>`</span></span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> str    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    triangle<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token function">rightAngle</span><span class="token punctuation">(</span><span class="token string">'*'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span></code></pre><p>（2）解法2. 直接写死输出</p><pre class=" language-javascript"><code class="language-javascript">      <span class="token keyword">var</span> triangle <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.triangle'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 补全代码</span>      triangle<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span><span class="token template-string"><span class="token string">`*&lt;br>**&lt;br>***`</span></span></code></pre><p>（3）解法3. 利用双层for循环来解</p><pre class=" language-javascript"><code class="language-javascript">     <span class="token keyword">var</span> triangle <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.triangle'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 补全代码</span>    <span class="token keyword">function</span> <span class="token function">rightAngle</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">''</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> word <span class="token operator">=</span> <span class="token string">''</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          word <span class="token operator">+</span><span class="token operator">=</span> s        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        str <span class="token operator">+</span><span class="token operator">=</span> word <span class="token operator">+</span> <span class="token template-string"><span class="token string">`&lt;br>`</span></span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> str    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    triangle<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token function">rightAngle</span><span class="token punctuation">(</span><span class="token string">'*'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span></code></pre><h2 id="2-指定数组范围，随机输出一个无重复数组-JS7"><a href="#2-指定数组范围，随机输出一个无重复数组-JS7" class="headerlink" title="2.指定数组范围，随机输出一个无重复数组(JS7)"></a>2.指定数组范围，随机输出一个无重复数组(JS7)</h2><p>（1）解法1. 用random生成随机数字，利用indexOf判断数组中是否存在</p><ul><li>indexOf():该方法返回给定元素能找在数组中找到的第一个索引值，否则返回-1；</li><li>includes():该方法返回 true or false  来判断数组中是否存在，可以检测NaN, 缺点低版本浏览器支持不是很友好</li><li>some():用于检测是否有满足条件的元素，有，就不继续检测后面的元素，直接返回true,如果都不符合，返回false</li></ul><pre class=" language-javascript"><code class="language-javascript"> <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">58</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">69</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">// some</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>e <span class="token operator">=</span><span class="token operator">></span> e <span class="token operator">===</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//true</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//do something...</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><ul><li>find():它的参数是一个回调函数，所有数组元素依次遍历该回调函数，直到找出第一个返回值为true的元素，然后返回该元素，否则返回undefined。</li></ul><pre class=" language-javascript"><code class="language-javascript"> <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">58</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">69</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">// some</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>value<span class="token punctuation">,</span>arr<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>value<span class="token operator">===</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//true</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//do something...</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><hr><pre class=" language-javascript"><code class="language-javascript">  <span class="token keyword">function</span> <span class="token function">getUniqueNum</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> len<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">!==</span> len<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//math.random()要利用floor,ceil进行取整</span>        <span class="token comment" spellcheck="true">// 需要[n， m):  Math.floor(Math.random() * (m - n)) + n;</span>        <span class="token comment" spellcheck="true">// 需要[n， m]:   Math.floor(Math.random() * (m - n + 1)) + n;</span>        <span class="token comment" spellcheck="true">// 解释：Math.random() * (m - n + 1) 的取值为[0, m - n + 1)， 再加n就是[n, m + 1)， 但这样就可能取到(m, m + 1) 的数， 所以向下取整。</span>        <span class="token keyword">let</span> num <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>num2 <span class="token operator">-</span> num1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> num1<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> arr    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>（2）解法2.利用set唯一值特性去除</p><blockquote><p><a href="https://juejin.cn/post/7154195061734375437">set教程详解</a></p></blockquote><pre class=" language-javascript"><code class="language-javascript">   <span class="token keyword">function</span> <span class="token function">getUniqueNum</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> len<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>size <span class="token operator">!==</span> len<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> num <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>num2 <span class="token operator">-</span> num1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> num1<span class="token punctuation">)</span>        arr<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//注意要将set集合转换为数组</span>      <span class="token comment" spellcheck="true">//可以利用 扩展运算符...，Array.from(),通过遍历set将每个元素加入到数组当中</span>      <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr<span class="token punctuation">]</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="3-数组扁平化处理-JS20"><a href="#3-数组扁平化处理-JS20" class="headerlink" title="3.数组扁平化处理(JS20)"></a>3.数组扁平化处理(JS20)</h2><p>（1）解法1.通过判断数组中每个元素是否是数组，递归处理</p><ul><li>instanceof运算符用于检验构造函数的prototype属性是否出现在对象的原型链中的任何位置，返回一个布尔值。<code>let a = []; a instanceof Array; //true</code></li><li>实例的构造函数属性constructor指向构造函数，那么通过constructor属性也可以判断是否为一个数组。<code> let a = [1,3,4]; a.constructor === Array;//true</code></li><li>Object.prototype.toString().call()可以获取到对象的不同类型，而且也可以检验是否为数组，比如是否是一个函数，是否是数字等等</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object Array]'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span><span class="token comment" spellcheck="true">//检验是否是函数</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object Function]'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span><span class="token comment" spellcheck="true">//检验是否是数字</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object Number]'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span></code></pre><ul><li>Array.isArray() 用于确定传递的值是否是一个数组，返回一个布尔值。<code> let a = [1,2,3] Array.isArray(a);//true</code></li></ul><hr><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">function</span> <span class="token function">flatten</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//如果传入的不是数组元素</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span>       <span class="token keyword">let</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>      arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          newArr<span class="token operator">=</span>newArr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token function">flatten</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> newArr    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>（2）解法2.toString和split结合</p><pre class=" language-javaScript"><code class="language-javaScript">    function flatten(arr) &#123;      let result = [];      result = arr.toString() // 1,2,3,4,1      result = result.split(',') // ['1', '2', '3', '4', '1']      result = result.map(Number) // [1, 2, 3, 4, 1]      return result  //可以将三者合并成一句，此处仅为展示响应结果    &#125;</code></pre><p> （3）解法3.用reduce方法累加实现（跟递归相似），reduce方法可缓存一个变量，迭代时我们可以操作这个变量，然后返回它。</p><pre class=" language-javaScript"><code class="language-javaScript">   function flatten(arr) &#123;      return arr.reduce((pre, next) => &#123;        if (Array.isArray(next)) &#123;          return pre.concat(flatten(next))        &#125; else &#123;          return pre.concat(next)        &#125;      &#125;, [])&#125;</code></pre><p>  （4）解法4. 扩展运算符+some实现</p><pre class=" language-javaScript"><code class="language-javaScript">    function flatten(arr) &#123;      while (arr.some(item =>          Array.isArray(item)        )) &#123;        arr = [].concat(...arr)      &#125;      return arr    &#125;</code></pre><p>  （5）解法5. ES6的flat方法，flat() 方法会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。默认为1层，参数depth也可以传进 Infinity，代表不论多少层都要展开。</p><pre class=" language-javaScript"><code class="language-javaScript">    function flatten(arr) &#123;      return arr.flat(Infinity)    &#125;</code></pre><h2 id="4-时间格式化输出-JS47"><a href="#4-时间格式化输出-JS47" class="headerlink" title="4.时间格式化输出(JS47)"></a>4.时间格式化输出(JS47)</h2><p>  （1）解法1. toLocaleString()方法实现</p><ul><li>输出2019-09-27 16:23:21  <code>new Date().toLocaleString(&#39;zh&#39;, &#123; hour12: false &#125;).replaceAll(&#39;/&#39;, &#39;-&#39;) </code></li><li>输出 2019-09-27 <code>new Date().toLocaleDateString(&#39;zh&#39;).replaceAll(&#39;/&#39;, &#39;-&#39;) </code></li><li>16:23:21  <code>new Date().toLocaleTimeString(&#39;zh&#39;, &#123; hour12: false &#125;) </code></li></ul><pre class=" language-javaScript"><code class="language-javaScript">    var t = 1521694261 // 该变量为时间戳，，即自从 Unix 纪元（格林威治时间 1970 年 1 月 1 日 00:00:00）到当前时间的秒数    function formatDate(data) &#123;      return new Date(data).toLocaleString('zh', &#123;        hour12: false      &#125;).replaceAll('/', '-')    &#125;</code></pre><p>   （2）解法2. 传统方法实现</p><ul><li>new Date([params]) 注意，如果传参，都是将其转换为中国标准时间来进行处理<blockquote><p><a href="https://blog.csdn.net/huawuque004/article/details/81739442#:~:text=JavaScript%E4%B8%8B%EF%BC%8Cnew%20Date%20%28%5Bparams%5D%29%2C%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%E6%9C%89%E4%BB%A5%E4%B8%8B%E4%BA%94%E7%A7%8D%E6%96%B9%E5%BC%8F%EF%BC%9A%201%E3%80%81new%20Date%20%28%22month%20dd%2Cyyyy%20hh%3Amm%3Ass%22%29%3B,Date%20%28yyyy%2Cmth%2Cdd%2Chh%2Cmm%2Css%29%3B%20%E6%B3%A8%E6%84%8F%EF%BC%9A%E8%BF%99%E7%A7%8D%E6%96%B9%E5%BC%8F%E4%B8%8B%EF%BC%8C%E5%BF%85%E9%A1%BB%E4%BC%A0%E9%80%92%20%E6%95%B4%E5%9E%8B%20%EF%BC%9B%204%E3%80%81new%20Date%20%28yyyy%2Cmth%2Cdd%29%3B">new Date([params])传参讲解</a></p></blockquote></li></ul><pre class=" language-javaScript"><code class="language-javaScript">    const timestamp = 1521694261 * 1000 //注意如果要传入时间戳形式，要记得乘以1000，因为该函数会默认为传递的是毫秒数    function currentTime(val) &#123;      const date = new Date(val) //如果val为空，此时date时间格式为Mon Jun 19 2023 08:53:48 GMT+0800 (中国标准时间)      const zeroFill = function (value) &#123;        if (value < 10) &#123;          value = '0' + value        &#125;        return value      &#125;      //输出标准时间格式2014-09-05 13:14:20      const year = date.getFullYear(); //年      const month = zeroFill(date.getMonth() + 1); //月      const day = zeroFill(date.getDate()); //日      const hh = zeroFill(date.getHours()); //时      const mm = zeroFill(date.getMinutes()); //分      const ss = zeroFill(date.getSeconds()); //秒    //  const w = function () &#123;    //     arr = ['日', '一', '二', '三', '四', '五', '六']    //     return arr[date.getDay()]    //   &#125;()      return (`$&#123;year&#125;-$&#123;month&#125;-$&#123;day&#125; $&#123;hh&#125;:$&#123;mm&#125;:$&#123;ss&#125; `)      // return (`$&#123;year&#125;-$&#123;month&#125;-$&#123;day&#125; $&#123;hh&#125;:$&#123;mm&#125;:$&#123;ss&#125; 星期$&#123;w&#125;`) //标准时间回后面加上星期几      //输出简洁时间格式      // const year = date.getFullYear()% 100,; //年      // const month =date.getMonth() + 1; //月      // const day = date.getDate(); //日      // const hh = date.getHours(); //时      // const mm = date.getMinutes(); //分      // const ss = date.getSeconds(); //秒      // return (`$&#123;year&#125;-$&#123;month&#125;-$&#123;day&#125; $&#123;hh&#125;:$&#123;mm&#125;:$&#123;ss&#125;`)    &#125;    currentTime(timestamp)</code></pre><p>  （2）解法3. 通过引入第三方库(moment)来实现</p><ul><li>安装moment.js</li></ul><pre class=" language-javaScript"><code class="language-javaScript"> npm install moment</code></pre><ul><li>导入moment.js模块（main.js）</li></ul><pre class=" language-javaScript"><code class="language-javaScript">    import moment from 'moment';    Vue.prototype.$moment = moment</code></pre><ul><li>格式化时间</li></ul><pre class=" language-javaScript"><code class="language-javaScript">// `this.$moment()` 输出当前时间的moment对象console.log(this.$moment().format('YYYY-MM-DD HH:mm:ss')); // 2023-05-29 00:30:19</code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程学习总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
