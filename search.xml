<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/06/21/hello-world/"/>
      <url>/2023/06/21/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>牛客JS中等难度编程题解析总结</title>
      <link href="/2023/06/16/%E5%9F%BA%E7%A1%80%E7%BC%96%E7%A8%8B%E9%A2%98(%E4%B8%80)/"/>
      <url>/2023/06/16/%E5%9F%BA%E7%A1%80%E7%BC%96%E7%A8%8B%E9%A2%98(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<h1 id="牛客JS编程题（中等难度）"><a href="#牛客JS编程题（中等难度）" class="headerlink" title="牛客JS编程题（中等难度）"></a>牛客JS编程题（中等难度）</h1><h2 id="1-输出实现直角三角形-JS1"><a href="#1-输出实现直角三角形-JS1" class="headerlink" title="1.输出实现直角三角形(JS1)"></a>1.输出实现直角三角形(JS1)</h2><h2 id="（1）解法1，封装成一个函数，利用循环-repeat来解（2）解法2-直接写死输出（3）解法3-利用双层for循环来解-2-指定数组范围，随机输出一个无重复数组-JS7-（1）解法1-用random生成随机数字，利用indexOf判断数组中是否存在-indexOf-该方法返回给定元素能找在数组中找到的第一个索引值，否则返回-1；-includes-该方法返回-true-or-false-来判断数组中是否存在，可以检测NaN-缺点低版本浏览器支持不是很友好-some-用于检测是否有满足条件的元素，有，就不继续检测后面的元素，直接返回true-如果都不符合，返回false-find-它的参数是一个回调函数，所有数组元素依次遍历该回调函数，直到找出第一个返回值为true的元素，然后返回该元素，否则返回undefined。-（2）解法2-利用set唯一值特性去除-gt-set教程详解-3-数组扁平化处理-JS20-（1）解法1-通过判断数组中每个元素是否是数组，递归处理-instanceof运算符用于检验构造函数的prototype属性是否出现在对象的原型链中的任何位置，返回一个布尔值。let-a-a-instanceof-Array-true-实例的构造函数属性constructor指向构造函数，那么通过constructor属性也可以判断是否为一个数组。-let-a-1-3-4-a-constructor-Array-true-Object-prototype-toString-call-可以获取到对象的不同类型，而且也可以检验是否为数组，比如是否是一个函数，是否是数字等等-Array-isArray-用于确定传递的值是否是一个数组，返回一个布尔值。-let-a-1-2-3-Array-isArray-a-true"><a href="#（1）解法1，封装成一个函数，利用循环-repeat来解（2）解法2-直接写死输出（3）解法3-利用双层for循环来解-2-指定数组范围，随机输出一个无重复数组-JS7-（1）解法1-用random生成随机数字，利用indexOf判断数组中是否存在-indexOf-该方法返回给定元素能找在数组中找到的第一个索引值，否则返回-1；-includes-该方法返回-true-or-false-来判断数组中是否存在，可以检测NaN-缺点低版本浏览器支持不是很友好-some-用于检测是否有满足条件的元素，有，就不继续检测后面的元素，直接返回true-如果都不符合，返回false-find-它的参数是一个回调函数，所有数组元素依次遍历该回调函数，直到找出第一个返回值为true的元素，然后返回该元素，否则返回undefined。-（2）解法2-利用set唯一值特性去除-gt-set教程详解-3-数组扁平化处理-JS20-（1）解法1-通过判断数组中每个元素是否是数组，递归处理-instanceof运算符用于检验构造函数的prototype属性是否出现在对象的原型链中的任何位置，返回一个布尔值。let-a-a-instanceof-Array-true-实例的构造函数属性constructor指向构造函数，那么通过constructor属性也可以判断是否为一个数组。-let-a-1-3-4-a-constructor-Array-true-Object-prototype-toString-call-可以获取到对象的不同类型，而且也可以检验是否为数组，比如是否是一个函数，是否是数字等等-Array-isArray-用于确定传递的值是否是一个数组，返回一个布尔值。-let-a-1-2-3-Array-isArray-a-true" class="headerlink" title="（1）解法1，封装成一个函数，利用循环+repeat来解（2）解法2. 直接写死输出（3）解法3. 利用双层for循环来解## 2.指定数组范围，随机输出一个无重复数组(JS7)（1）解法1. 用random生成随机数字，利用indexOf判断数组中是否存在 - indexOf():该方法返回给定元素能找在数组中找到的第一个索引值，否则返回-1； - includes():该方法返回 true or false  来判断数组中是否存在，可以检测NaN, 缺点低版本浏览器支持不是很友好 - some():用于检测是否有满足条件的元素，有，就不继续检测后面的元素，直接返回true,如果都不符合，返回false    - find():它的参数是一个回调函数，所有数组元素依次遍历该回调函数，直到找出第一个返回值为true的元素，然后返回该元素，否则返回undefined。   ***（2）解法2.利用set唯一值特性去除&gt; set教程详解## 3.数组扁平化处理(JS20)（1）解法1.通过判断数组中每个元素是否是数组，递归处理- instanceof运算符用于检验构造函数的prototype属性是否出现在对象的原型链中的任何位置，返回一个布尔值。let a = []; a instanceof Array; //true- 实例的构造函数属性constructor指向构造函数，那么通过constructor属性也可以判断是否为一个数组。 let a = [1,3,4]; a.constructor === Array;//true-  Object.prototype.toString().call()可以获取到对象的不同类型，而且也可以检验是否为数组，比如是否是一个函数，是否是数字等等  - Array.isArray() 用于确定传递的值是否是一个数组，返回一个布尔值。 let a = [1,2,3] Array.isArray(a);//true"></a>（1）解法1，封装成一个函数，利用循环+repeat来解<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> triangle = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.triangle&#x27;</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">rightAngle</span>(<span class="params">s, n</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> str = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="comment">//repeat(n) 重复复制一个字符串n次</span></span><br><span class="line">    str += s.<span class="title function_">repeat</span>(i) + <span class="string">`&lt;br&gt;`</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> str</span><br><span class="line">&#125;</span><br><span class="line">triangle.<span class="property">innerHTML</span> = <span class="title function_">rightAngle</span>(<span class="string">&#x27;*&#x27;</span>, <span class="number">3</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>（2）解法2. 直接写死输出<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> triangle = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.triangle&#x27;</span>);</span><br><span class="line"><span class="comment">// 补全代码</span></span><br><span class="line">triangle.<span class="property">innerHTML</span>=<span class="string">`*&lt;br&gt;**&lt;br&gt;***`</span></span><br></pre></td></tr></table></figure><br>（3）解法3. 利用双层for循环来解<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> triangle = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.triangle&#x27;</span>);</span><br><span class="line"><span class="comment">// 补全代码</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">rightAngle</span>(<span class="params">s, n</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> str = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> word = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">      word += s</span><br><span class="line">    &#125;</span><br><span class="line">    str += word + <span class="string">`&lt;br&gt;`</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> str</span><br><span class="line">&#125;</span><br><span class="line">triangle.<span class="property">innerHTML</span> = <span class="title function_">rightAngle</span>(<span class="string">&#x27;*&#x27;</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure><br>## 2.指定数组范围，随机输出一个无重复数组(JS7)<br>（1）解法1. 用random生成随机数字，利用indexOf判断数组中是否存在<br> - indexOf():该方法返回给定元素能找在数组中找到的第一个索引值，否则返回-1；<br> - includes():该方法返回 true or false  来判断数组中是否存在，可以检测NaN, 缺点低版本浏览器支持不是很友好<br> - some():用于检测是否有满足条件的元素，有，就不继续检测后面的元素，直接返回true,如果都不符合，返回false<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">100</span>,<span class="number">20</span>,<span class="number">50</span>,<span class="number">58</span>,<span class="number">6</span>,<span class="number">69</span>,<span class="number">5</span>]</span><br><span class="line">   <span class="comment">// some</span></span><br><span class="line">   <span class="keyword">let</span> result = arr.<span class="title function_">some</span>(<span class="function"><span class="params">e</span> =&gt;</span> e === <span class="number">20</span>) <span class="comment">//true</span></span><br><span class="line">   <span class="keyword">if</span> (result) &#123;</span><br><span class="line">   <span class="comment">//do something...</span></span><br><span class="line">   &#125;;</span><br></pre></td></tr></table></figure><br>  - find():它的参数是一个回调函数，所有数组元素依次遍历该回调函数，直到找出第一个返回值为true的元素，然后返回该元素，否则返回undefined。<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">100</span>,<span class="number">20</span>,<span class="number">50</span>,<span class="number">58</span>,<span class="number">6</span>,<span class="number">69</span>,<span class="number">5</span>]</span><br><span class="line">   <span class="comment">// some</span></span><br><span class="line">   <span class="keyword">let</span> result = arr.<span class="title function_">find</span>(<span class="function">(<span class="params">index,value,arr</span>) =&gt;</span> &#123;<span class="keyword">if</span>(value===<span class="number">20</span>)&#125;) <span class="comment">//true</span></span><br><span class="line">   <span class="keyword">if</span> (result) &#123;</span><br><span class="line">   <span class="comment">//do something...</span></span><br><span class="line">   &#125;;</span><br></pre></td></tr></table></figure><br> ***<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getUniqueNum</span>(<span class="params">num1, num2, len</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> arr = []</span><br><span class="line">    <span class="keyword">while</span> (arr.<span class="property">length</span> !== len) &#123;</span><br><span class="line">      <span class="comment">//math.random()要利用floor,ceil进行取整</span></span><br><span class="line">      <span class="comment">// 需要[n， m):  Math.floor(Math.random() * (m - n)) + n;</span></span><br><span class="line">      <span class="comment">// 需要[n， m]:   Math.floor(Math.random() * (m - n + 1)) + n;</span></span><br><span class="line">      <span class="comment">// 解释：Math.random() * (m - n + 1) 的取值为[0, m - n + 1)， 再加n就是[n, m + 1)， 但这样就可能取到(m, m + 1) 的数， 所以向下取整。</span></span><br><span class="line">      <span class="keyword">let</span> num = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * (num2 - num1 + <span class="number">1</span>) + num1)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (arr.<span class="title function_">indexOf</span>(num) === -<span class="number">1</span>) &#123;</span><br><span class="line">        arr.<span class="title function_">push</span>(num)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><br>（2）解法2.利用set唯一值特性去除<br>&gt; <a href="https://juejin.cn/post/7154195061734375437">set教程详解</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getUniqueNum</span>(<span class="params">num1, num2, len</span>) &#123;</span><br><span class="line">   <span class="keyword">let</span> arr = <span class="keyword">new</span> <span class="title class_">Set</span>()</span><br><span class="line">   <span class="keyword">while</span> (arr.<span class="property">size</span> !== len) &#123;</span><br><span class="line">     <span class="keyword">let</span> num = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * (num2 - num1 + <span class="number">1</span>) + num1)</span><br><span class="line">     arr.<span class="title function_">add</span>(num)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//注意要将set集合转换为数组</span></span><br><span class="line">   <span class="comment">//可以利用 扩展运算符...，Array.from(),通过遍历set将每个元素加入到数组当中</span></span><br><span class="line">   <span class="keyword">return</span> [...arr]</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><br>## 3.数组扁平化处理(JS20)<br>（1）解法1.通过判断数组中每个元素是否是数组，递归处理<br>- instanceof运算符用于检验构造函数的prototype属性是否出现在对象的原型链中的任何位置，返回一个布尔值。<code>let a = []; a instanceof Array; //true</code><br>- 实例的构造函数属性constructor指向构造函数，那么通过constructor属性也可以判断是否为一个数组。<code> let a = [1,3,4]; a.constructor === Array;//true</code><br>-  Object.prototype.toString().call()可以获取到对象的不同类型，而且也可以检验是否为数组，比如是否是一个函数，是否是数字等等<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">let</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(a) === <span class="string">&#x27;[object Array]&#x27;</span>;<span class="comment">//true</span></span><br><span class="line"><span class="comment">//检验是否是函数</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(a) === <span class="string">&#x27;[object Function]&#x27;</span>;<span class="comment">//true</span></span><br><span class="line"><span class="comment">//检验是否是数字</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">1</span>;</span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(a) === <span class="string">&#x27;[object Number]&#x27;</span>;<span class="comment">//true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>- Array.isArray() 用于确定传递的值是否是一个数组，返回一个布尔值。<code> let a = [1,2,3] Array.isArray(a);//true</code></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">flatten</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="comment">//如果传入的不是数组元素</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr)) <span class="keyword">return</span></span><br><span class="line">   <span class="keyword">let</span> newArr = []</span><br><span class="line">  arr.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(item)) &#123;</span><br><span class="line">      newArr.<span class="title function_">push</span>(item)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      newArr=newArr.<span class="title function_">concat</span>(<span class="title function_">flatten</span>(item))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> newArr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）解法2.toString和split结合</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">flatten</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> result = [];</span><br><span class="line">  result = arr.<span class="title function_">toString</span>() <span class="comment">// 1,2,3,4,1</span></span><br><span class="line">  result = result.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>) <span class="comment">// [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;, &#x27;1&#x27;]</span></span><br><span class="line">  result = result.<span class="title function_">map</span>(<span class="title class_">Number</span>) <span class="comment">// [1, 2, 3, 4, 1]</span></span><br><span class="line">  <span class="keyword">return</span> result  <span class="comment">//可以将三者合并成一句，此处仅为展示响应结果</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> （3）解法3.用reduce方法累加实现（跟递归相似），reduce方法可缓存一个变量，迭代时我们可以操作这个变量，然后返回它。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">flatten</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">   <span class="keyword">return</span> arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">pre, next</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(next)) &#123;</span><br><span class="line">       <span class="keyword">return</span> pre.<span class="title function_">concat</span>(<span class="title function_">flatten</span>(next))</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> pre.<span class="title function_">concat</span>(next)</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;, [])&#125;</span><br></pre></td></tr></table></figure><p>  （4）解法4. 扩展运算符+some实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">flatten</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">while</span> (arr.<span class="title function_">some</span>(<span class="function"><span class="params">item</span> =&gt;</span></span><br><span class="line">      <span class="title class_">Array</span>.<span class="title function_">isArray</span>(item)</span><br><span class="line">    )) &#123;</span><br><span class="line">    arr = [].<span class="title function_">concat</span>(...arr)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  （5）解法5. ES6的flat方法，flat() 方法会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。默认为1层，参数depth也可以传进 Infinity，代表不论多少层都要展开。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">flatten</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">flat</span>(<span class="title class_">Infinity</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-时间格式化输出-JS47"><a href="#4-时间格式化输出-JS47" class="headerlink" title="4.时间格式化输出(JS47)"></a>4.时间格式化输出(JS47)</h2><p>  （1）解法1. toLocaleString()方法实现</p><ul><li>输出2019-09-27 16:23:21  <code>new Date().toLocaleString(&#39;zh&#39;, &#123; hour12: false &#125;).replaceAll(&#39;/&#39;, &#39;-&#39;) </code></li><li>输出 2019-09-27 <code>new Date().toLocaleDateString(&#39;zh&#39;).replaceAll(&#39;/&#39;, &#39;-&#39;) </code></li><li>16:23:21  <code>new Date().toLocaleTimeString(&#39;zh&#39;, &#123; hour12: false &#125;) </code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> t = <span class="number">1521694261</span> <span class="comment">// 该变量为时间戳，，即自从 Unix 纪元（格林威治时间 1970 年 1 月 1 日 00:00:00）到当前时间的秒数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">formatDate</span>(<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>(data).<span class="title function_">toLocaleString</span>(<span class="string">&#x27;zh&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">hour12</span>: <span class="literal">false</span></span><br><span class="line">  &#125;).<span class="title function_">replaceAll</span>(<span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> （2）解法2. 传统方法实现</li><li>new Date([params]) 注意，如果传参，都是将其转换为中国标准时间来进行处理<blockquote><p><a href="https://blog.csdn.net/huawuque004/article/details/81739442#:~:text=JavaScript%E4%B8%8B%EF%BC%8Cnew%20Date%20%28%5Bparams%5D%29%2C%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%E6%9C%89%E4%BB%A5%E4%B8%8B%E4%BA%94%E7%A7%8D%E6%96%B9%E5%BC%8F%EF%BC%9A%201%E3%80%81new%20Date%20%28%22month%20dd%2Cyyyy%20hh%3Amm%3Ass%22%29%3B,Date%20%28yyyy%2Cmth%2Cdd%2Chh%2Cmm%2Css%29%3B%20%E6%B3%A8%E6%84%8F%EF%BC%9A%E8%BF%99%E7%A7%8D%E6%96%B9%E5%BC%8F%E4%B8%8B%EF%BC%8C%E5%BF%85%E9%A1%BB%E4%BC%A0%E9%80%92%20%E6%95%B4%E5%9E%8B%20%EF%BC%9B%204%E3%80%81new%20Date%20%28yyyy%2Cmth%2Cdd%29%3B">new Date([params])传参讲解</a></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> timestamp = <span class="number">1521694261</span> * <span class="number">1000</span> <span class="comment">//注意如果要传入时间戳形式，要记得乘以1000，因为该函数会默认为传递的是毫秒数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">currentTime</span>(<span class="params">val</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>(val) <span class="comment">//如果val为空，此时date时间格式为Mon Jun 19 2023 08:53:48 GMT+0800 (中国标准时间)</span></span><br><span class="line">  <span class="keyword">const</span> zeroFill = <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (value &lt; <span class="number">10</span>) &#123;</span><br><span class="line">      value = <span class="string">&#x27;0&#x27;</span> + value</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//输出标准时间格式2014-09-05 13:14:20</span></span><br><span class="line">  <span class="keyword">const</span> year = date.<span class="title function_">getFullYear</span>(); <span class="comment">//年</span></span><br><span class="line">  <span class="keyword">const</span> month = <span class="title function_">zeroFill</span>(date.<span class="title function_">getMonth</span>() + <span class="number">1</span>); <span class="comment">//月</span></span><br><span class="line">  <span class="keyword">const</span> day = <span class="title function_">zeroFill</span>(date.<span class="title function_">getDate</span>()); <span class="comment">//日</span></span><br><span class="line">  <span class="keyword">const</span> hh = <span class="title function_">zeroFill</span>(date.<span class="title function_">getHours</span>()); <span class="comment">//时</span></span><br><span class="line">  <span class="keyword">const</span> mm = <span class="title function_">zeroFill</span>(date.<span class="title function_">getMinutes</span>()); <span class="comment">//分</span></span><br><span class="line">  <span class="keyword">const</span> ss = <span class="title function_">zeroFill</span>(date.<span class="title function_">getSeconds</span>()); <span class="comment">//秒</span></span><br><span class="line"><span class="comment">//  const w = function () &#123;</span></span><br><span class="line"><span class="comment">//     arr = [&#x27;日&#x27;, &#x27;一&#x27;, &#x27;二&#x27;, &#x27;三&#x27;, &#x27;四&#x27;, &#x27;五&#x27;, &#x27;六&#x27;]</span></span><br><span class="line"><span class="comment">//     return arr[date.getDay()]</span></span><br><span class="line"><span class="comment">//   &#125;()</span></span><br><span class="line">  <span class="keyword">return</span> (<span class="string">`<span class="subst">$&#123;year&#125;</span>-<span class="subst">$&#123;month&#125;</span>-<span class="subst">$&#123;day&#125;</span> <span class="subst">$&#123;hh&#125;</span>:<span class="subst">$&#123;mm&#125;</span>:<span class="subst">$&#123;ss&#125;</span> `</span>)</span><br><span class="line">  <span class="comment">// return (`$&#123;year&#125;-$&#123;month&#125;-$&#123;day&#125; $&#123;hh&#125;:$&#123;mm&#125;:$&#123;ss&#125; 星期$&#123;w&#125;`) //标准时间回后面加上星期几</span></span><br><span class="line">  <span class="comment">//输出简洁时间格式</span></span><br><span class="line">  <span class="comment">// const year = date.getFullYear()% 100,; //年</span></span><br><span class="line">  <span class="comment">// const month =date.getMonth() + 1; //月</span></span><br><span class="line">  <span class="comment">// const day = date.getDate(); //日</span></span><br><span class="line">  <span class="comment">// const hh = date.getHours(); //时</span></span><br><span class="line">  <span class="comment">// const mm = date.getMinutes(); //分</span></span><br><span class="line">  <span class="comment">// const ss = date.getSeconds(); //秒</span></span><br><span class="line">  <span class="comment">// return (`$&#123;year&#125;-$&#123;month&#125;-$&#123;day&#125; $&#123;hh&#125;:$&#123;mm&#125;:$&#123;ss&#125;`)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">currentTime</span>(timestamp)</span><br></pre></td></tr></table></figure>（2）解法3. 通过引入第三方库(moment)来实现</li><li>安装moment.js<br>&#96;&#96;    npm install moment</li></ul><p>&#96;&#96;</p><ul><li>导入moment.js模块（main.js）<br><code>  import moment from &#39;moment&#39;;   Vue.prototype.$moment = moment</code></li><li>格式化时间<br>&#96;&#96;<br>&#x2F;&#x2F; <code>this.$moment()</code> 输出当前时间的moment对象<br>console.log(this.$moment().format(‘YYYY-MM-DD HH:mm:ss’)); &#x2F;&#x2F; 2023-05-29 00:30:19</li></ul><p>&#96;&#96;</p>]]></content>
      
      
      <categories>
          
          <category> 编程学习总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
