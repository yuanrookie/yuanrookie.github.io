<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/06/21/hello-world/"/>
      <url>/2023/06/21/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>牛客JS中等难度编程题解析总结</title>
      <link href="/2023/06/16/%E5%9F%BA%E7%A1%80%E7%BC%96%E7%A8%8B%E9%A2%98(%E4%B8%80)/"/>
      <url>/2023/06/16/%E5%9F%BA%E7%A1%80%E7%BC%96%E7%A8%8B%E9%A2%98(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<h1 id="牛客JS编程题（中等难度）"><a href="#牛客JS编程题（中等难度）" class="headerlink" title="牛客JS编程题（中等难度）"></a>牛客JS编程题（中等难度）</h1><h2 id="1-输出实现直角三角形-JS1"><a href="#1-输出实现直角三角形-JS1" class="headerlink" title="1.输出实现直角三角形(JS1)"></a>1.输出实现直角三角形(JS1)</h2><p>（1）解法1，封装成一个函数，利用循环+repeat来解</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">var</span> triangle <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.triangle'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">rightAngle</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">''</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//repeat(n) 重复复制一个字符串n次</span>        str <span class="token operator">+</span><span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token template-string"><span class="token string">`&lt;br>`</span></span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> str    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    triangle<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token function">rightAngle</span><span class="token punctuation">(</span><span class="token string">'*'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span></code></pre><p>（2）解法2. 直接写死输出</p><pre class=" language-javascript"><code class="language-javascript">      <span class="token keyword">var</span> triangle <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.triangle'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 补全代码</span>      triangle<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span><span class="token template-string"><span class="token string">`*&lt;br>**&lt;br>***`</span></span></code></pre><p>（3）解法3. 利用双层for循环来解</p><pre class=" language-javascript"><code class="language-javascript">     <span class="token keyword">var</span> triangle <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.triangle'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 补全代码</span>    <span class="token keyword">function</span> <span class="token function">rightAngle</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">''</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> word <span class="token operator">=</span> <span class="token string">''</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          word <span class="token operator">+</span><span class="token operator">=</span> s        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        str <span class="token operator">+</span><span class="token operator">=</span> word <span class="token operator">+</span> <span class="token template-string"><span class="token string">`&lt;br>`</span></span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> str    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    triangle<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token function">rightAngle</span><span class="token punctuation">(</span><span class="token string">'*'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span></code></pre><h2 id="2-指定数组范围，随机输出一个无重复数组-JS7"><a href="#2-指定数组范围，随机输出一个无重复数组-JS7" class="headerlink" title="2.指定数组范围，随机输出一个无重复数组(JS7)"></a>2.指定数组范围，随机输出一个无重复数组(JS7)</h2><p>（1）解法1. 用random生成随机数字，利用indexOf判断数组中是否存在</p><ul><li>indexOf():该方法返回给定元素能找在数组中找到的第一个索引值，否则返回-1；</li><li>includes():该方法返回 true or false  来判断数组中是否存在，可以检测NaN, 缺点低版本浏览器支持不是很友好</li><li>some():用于检测是否有满足条件的元素，有，就不继续检测后面的元素，直接返回true,如果都不符合，返回false</li></ul><pre class=" language-javascript"><code class="language-javascript"> <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">58</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">69</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">// some</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>e <span class="token operator">=</span><span class="token operator">></span> e <span class="token operator">===</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//true</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//do something...</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><ul><li>find():它的参数是一个回调函数，所有数组元素依次遍历该回调函数，直到找出第一个返回值为true的元素，然后返回该元素，否则返回undefined。</li></ul><pre class=" language-javascript"><code class="language-javascript"> <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">58</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">69</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">// some</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>value<span class="token punctuation">,</span>arr<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>value<span class="token operator">===</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//true</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//do something...</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><hr><pre class=" language-javascript"><code class="language-javascript">  <span class="token keyword">function</span> <span class="token function">getUniqueNum</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> len<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">!==</span> len<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//math.random()要利用floor,ceil进行取整</span>        <span class="token comment" spellcheck="true">// 需要[n， m):  Math.floor(Math.random() * (m - n)) + n;</span>        <span class="token comment" spellcheck="true">// 需要[n， m]:   Math.floor(Math.random() * (m - n + 1)) + n;</span>        <span class="token comment" spellcheck="true">// 解释：Math.random() * (m - n + 1) 的取值为[0, m - n + 1)， 再加n就是[n, m + 1)， 但这样就可能取到(m, m + 1) 的数， 所以向下取整。</span>        <span class="token keyword">let</span> num <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>num2 <span class="token operator">-</span> num1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> num1<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> arr    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>（2）解法2.利用set唯一值特性去除</p><blockquote><p><a href="https://juejin.cn/post/7154195061734375437">set教程详解</a></p></blockquote><pre class=" language-javascript"><code class="language-javascript">   <span class="token keyword">function</span> <span class="token function">getUniqueNum</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> len<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>size <span class="token operator">!==</span> len<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> num <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>num2 <span class="token operator">-</span> num1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> num1<span class="token punctuation">)</span>        arr<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//注意要将set集合转换为数组</span>      <span class="token comment" spellcheck="true">//可以利用 扩展运算符...，Array.from(),通过遍历set将每个元素加入到数组当中</span>      <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr<span class="token punctuation">]</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="3-数组扁平化处理-JS20"><a href="#3-数组扁平化处理-JS20" class="headerlink" title="3.数组扁平化处理(JS20)"></a>3.数组扁平化处理(JS20)</h2><p>（1）解法1.通过判断数组中每个元素是否是数组，递归处理</p><ul><li>instanceof运算符用于检验构造函数的prototype属性是否出现在对象的原型链中的任何位置，返回一个布尔值。<code>let a = []; a instanceof Array; //true</code></li><li>实例的构造函数属性constructor指向构造函数，那么通过constructor属性也可以判断是否为一个数组。<code> let a = [1,3,4]; a.constructor === Array;//true</code></li><li>Object.prototype.toString().call()可以获取到对象的不同类型，而且也可以检验是否为数组，比如是否是一个函数，是否是数字等等</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object Array]'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span><span class="token comment" spellcheck="true">//检验是否是函数</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object Function]'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span><span class="token comment" spellcheck="true">//检验是否是数字</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object Number]'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span></code></pre><ul><li>Array.isArray() 用于确定传递的值是否是一个数组，返回一个布尔值。<code> let a = [1,2,3] Array.isArray(a);//true</code></li></ul><hr><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">function</span> <span class="token function">flatten</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//如果传入的不是数组元素</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span>       <span class="token keyword">let</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>      arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          newArr<span class="token operator">=</span>newArr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token function">flatten</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> newArr    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>（2）解法2.toString和split结合</p><pre class=" language-javaScript"><code class="language-javaScript">    function flatten(arr) &#123;      let result = [];      result = arr.toString() // 1,2,3,4,1      result = result.split(',') // ['1', '2', '3', '4', '1']      result = result.map(Number) // [1, 2, 3, 4, 1]      return result  //可以将三者合并成一句，此处仅为展示响应结果    &#125;</code></pre><p> （3）解法3.用reduce方法累加实现（跟递归相似），reduce方法可缓存一个变量，迭代时我们可以操作这个变量，然后返回它。</p><pre class=" language-javaScript"><code class="language-javaScript">   function flatten(arr) &#123;      return arr.reduce((pre, next) => &#123;        if (Array.isArray(next)) &#123;          return pre.concat(flatten(next))        &#125; else &#123;          return pre.concat(next)        &#125;      &#125;, [])&#125;</code></pre><p>  （4）解法4. 扩展运算符+some实现</p><pre class=" language-javaScript"><code class="language-javaScript">    function flatten(arr) &#123;      while (arr.some(item =>          Array.isArray(item)        )) &#123;        arr = [].concat(...arr)      &#125;      return arr    &#125;</code></pre><p>  （5）解法5. ES6的flat方法，flat() 方法会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。默认为1层，参数depth也可以传进 Infinity，代表不论多少层都要展开。</p><pre class=" language-javaScript"><code class="language-javaScript">    function flatten(arr) &#123;      return arr.flat(Infinity)    &#125;</code></pre><h2 id="4-时间格式化输出-JS47"><a href="#4-时间格式化输出-JS47" class="headerlink" title="4.时间格式化输出(JS47)"></a>4.时间格式化输出(JS47)</h2><p>  （1）解法1. toLocaleString()方法实现</p><ul><li>输出2019-09-27 16:23:21  <code>new Date().toLocaleString(&#39;zh&#39;, &#123; hour12: false &#125;).replaceAll(&#39;/&#39;, &#39;-&#39;) </code></li><li>输出 2019-09-27 <code>new Date().toLocaleDateString(&#39;zh&#39;).replaceAll(&#39;/&#39;, &#39;-&#39;) </code></li><li>16:23:21  <code>new Date().toLocaleTimeString(&#39;zh&#39;, &#123; hour12: false &#125;) </code></li></ul><pre class=" language-javaScript"><code class="language-javaScript">    var t = 1521694261 // 该变量为时间戳，，即自从 Unix 纪元（格林威治时间 1970 年 1 月 1 日 00:00:00）到当前时间的秒数    function formatDate(data) &#123;      return new Date(data).toLocaleString('zh', &#123;        hour12: false      &#125;).replaceAll('/', '-')    &#125;</code></pre><p>   （2）解法2. 传统方法实现</p><ul><li>new Date([params]) 注意，如果传参，都是将其转换为中国标准时间来进行处理<blockquote><p><a href="https://blog.csdn.net/huawuque004/article/details/81739442#:~:text=JavaScript%E4%B8%8B%EF%BC%8Cnew%20Date%20%28%5Bparams%5D%29%2C%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%E6%9C%89%E4%BB%A5%E4%B8%8B%E4%BA%94%E7%A7%8D%E6%96%B9%E5%BC%8F%EF%BC%9A%201%E3%80%81new%20Date%20%28%22month%20dd%2Cyyyy%20hh%3Amm%3Ass%22%29%3B,Date%20%28yyyy%2Cmth%2Cdd%2Chh%2Cmm%2Css%29%3B%20%E6%B3%A8%E6%84%8F%EF%BC%9A%E8%BF%99%E7%A7%8D%E6%96%B9%E5%BC%8F%E4%B8%8B%EF%BC%8C%E5%BF%85%E9%A1%BB%E4%BC%A0%E9%80%92%20%E6%95%B4%E5%9E%8B%20%EF%BC%9B%204%E3%80%81new%20Date%20%28yyyy%2Cmth%2Cdd%29%3B">new Date([params])传参讲解</a></p></blockquote></li></ul><pre class=" language-javaScript"><code class="language-javaScript">    const timestamp = 1521694261 * 1000 //注意如果要传入时间戳形式，要记得乘以1000，因为该函数会默认为传递的是毫秒数    function currentTime(val) &#123;      const date = new Date(val) //如果val为空，此时date时间格式为Mon Jun 19 2023 08:53:48 GMT+0800 (中国标准时间)      const zeroFill = function (value) &#123;        if (value < 10) &#123;          value = '0' + value        &#125;        return value      &#125;      //输出标准时间格式2014-09-05 13:14:20      const year = date.getFullYear(); //年      const month = zeroFill(date.getMonth() + 1); //月      const day = zeroFill(date.getDate()); //日      const hh = zeroFill(date.getHours()); //时      const mm = zeroFill(date.getMinutes()); //分      const ss = zeroFill(date.getSeconds()); //秒    //  const w = function () &#123;    //     arr = ['日', '一', '二', '三', '四', '五', '六']    //     return arr[date.getDay()]    //   &#125;()      return (`$&#123;year&#125;-$&#123;month&#125;-$&#123;day&#125; $&#123;hh&#125;:$&#123;mm&#125;:$&#123;ss&#125; `)      // return (`$&#123;year&#125;-$&#123;month&#125;-$&#123;day&#125; $&#123;hh&#125;:$&#123;mm&#125;:$&#123;ss&#125; 星期$&#123;w&#125;`) //标准时间回后面加上星期几      //输出简洁时间格式      // const year = date.getFullYear()% 100,; //年      // const month =date.getMonth() + 1; //月      // const day = date.getDate(); //日      // const hh = date.getHours(); //时      // const mm = date.getMinutes(); //分      // const ss = date.getSeconds(); //秒      // return (`$&#123;year&#125;-$&#123;month&#125;-$&#123;day&#125; $&#123;hh&#125;:$&#123;mm&#125;:$&#123;ss&#125;`)    &#125;    currentTime(timestamp)</code></pre><p>  （2）解法3. 通过引入第三方库(moment)来实现</p><ul><li>安装moment.js</li></ul><pre class=" language-javaScript"><code class="language-javaScript"> npm install moment</code></pre><ul><li>导入moment.js模块（main.js）</li></ul><pre class=" language-javaScript"><code class="language-javaScript">    import moment from 'moment';    Vue.prototype.$moment = moment</code></pre><ul><li>格式化时间</li></ul><pre class=" language-javaScript"><code class="language-javaScript">// `this.$moment()` 输出当前时间的moment对象console.log(this.$moment().format('YYYY-MM-DD HH:mm:ss')); // 2023-05-29 00:30:19</code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程学习总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
